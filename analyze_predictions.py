#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤.
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ –ª–∏–≥–∞–º –∏ —Ç–∏–ø–∞–º –ø—Ä–æ–≥–Ω–æ–∑–æ–≤.
"""

import sys
import logging
from datetime import datetime
from typing import Optional
from sqlalchemy import create_engine, text
from config import settings
import pandas as pd

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - [%(levelname)s] %(message)s'
)
logger = logging.getLogger(__name__)


def analyze_by_league_and_type(
    sport: Optional[str] = None,
    championship: Optional[str] = None,
    min_predictions: int = 10
) -> pd.DataFrame:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ –ª–∏–≥–∞–º –∏ —Ç–∏–ø–∞–º –ø—Ä–æ–≥–Ω–æ–∑–æ–≤.
    
    Args:
        sport: –§–∏–ª—å—Ç—Ä –ø–æ –≤–∏–¥—É —Å–ø–æ—Ä—Ç–∞ (None = –≤—Å–µ)
        championship: –§–∏–ª—å—Ç—Ä –ø–æ —á–µ–º–ø–∏–æ–Ω–∞—Ç—É (None = –≤—Å–µ)
        min_predictions: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –æ—Ç—á–µ—Ç
        
    Returns:
        DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    """
    engine = create_engine(settings.DATABASE_URL_mysql)
    
    where_clauses = ["st.prediction_correct IS NOT NULL"]
    if sport:
        where_clauses.append(f"s.sportName = '{sport}'")
    if championship:
        where_clauses.append(f"ch.championshipName = '{championship}'")
    
    where_sql = " AND ".join(where_clauses)
    
    query = f'''
    SELECT 
        s.sportName as sport,
        c.countryName as country,
        ch.championshipName as championship,
        st.forecast_type,
        COUNT(*) as total_predictions,
        SUM(CASE WHEN st.prediction_correct = 1 THEN 1 ELSE 0 END) as correct_predictions,
        SUM(CASE WHEN st.prediction_correct = 0 THEN 1 ELSE 0 END) as incorrect_predictions,
        ROUND(SUM(CASE WHEN st.prediction_correct = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) as accuracy_percent,
        MIN(st.created_at) as first_prediction,
        MAX(st.created_at) as last_prediction
    FROM statistics st
    JOIN sports s ON st.sport_id = s.id
    JOIN championships ch ON st.championship_id = ch.id
    JOIN countrys c ON ch.country_id = c.id
    WHERE {where_sql}
    GROUP BY s.sportName, c.countryName, ch.championshipName, st.forecast_type
    HAVING total_predictions >= {min_predictions}
    ORDER BY s.sportName, c.countryName, ch.championshipName, st.forecast_type
    '''
    
    with engine.connect() as conn:
        df = pd.read_sql(text(query), conn)
    
    return df


def analyze_by_league_summary(min_predictions: int = 10) -> pd.DataFrame:
    """
    –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–∏–≥–∞–º (–≤—Å–µ —Ç–∏–ø—ã –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤–º–µ—Å—Ç–µ).
    
    Args:
        min_predictions: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        
    Returns:
        DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    """
    engine = create_engine(settings.DATABASE_URL_mysql)
    
    query = f'''
    SELECT 
        s.sportName as sport,
        c.countryName as country,
        ch.championshipName as championship,
        COUNT(*) as total_predictions,
        SUM(CASE WHEN st.prediction_correct = 1 THEN 1 ELSE 0 END) as correct_predictions,
        SUM(CASE WHEN st.prediction_correct = 0 THEN 1 ELSE 0 END) as incorrect_predictions,
        ROUND(SUM(CASE WHEN st.prediction_correct = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) as accuracy_percent,
        COUNT(DISTINCT st.forecast_type) as forecast_types_count,
        MIN(st.created_at) as first_prediction,
        MAX(st.created_at) as last_prediction
    FROM statistics st
    JOIN sports s ON st.sport_id = s.id
    JOIN championships ch ON st.championship_id = ch.id
    JOIN countrys c ON ch.country_id = c.id
    WHERE st.prediction_correct IS NOT NULL
    GROUP BY s.sportName, c.countryName, ch.championshipName
    HAVING total_predictions >= {min_predictions}
    ORDER BY accuracy_percent DESC, total_predictions DESC
    '''
    
    with engine.connect() as conn:
        df = pd.read_sql(text(query), conn)
    
    return df


def analyze_by_forecast_type(min_predictions: int = 10) -> pd.DataFrame:
    """
    –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ (–≤—Å–µ –ª–∏–≥–∏ –≤–º–µ—Å—Ç–µ).
    
    Args:
        min_predictions: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        
    Returns:
        DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    """
    engine = create_engine(settings.DATABASE_URL_mysql)
    
    query = f'''
    SELECT 
        st.forecast_type,
        COUNT(*) as total_predictions,
        SUM(CASE WHEN st.prediction_correct = 1 THEN 1 ELSE 0 END) as correct_predictions,
        SUM(CASE WHEN st.prediction_correct = 0 THEN 1 ELSE 0 END) as incorrect_predictions,
        ROUND(SUM(CASE WHEN st.prediction_correct = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) as accuracy_percent,
        COUNT(DISTINCT st.championship_id) as leagues_count
    FROM statistics st
    WHERE st.prediction_correct IS NOT NULL
    GROUP BY st.forecast_type
    HAVING total_predictions >= {min_predictions}
    ORDER BY accuracy_percent DESC, total_predictions DESC
    '''
    
    with engine.connect() as conn:
        df = pd.read_sql(text(query), conn)
    
    return df


def print_detailed_report(df: pd.DataFrame, title: str):
    """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç."""
    print("\n" + "=" * 120)
    print(f"{title}")
    print("=" * 120)
    
    if df.empty:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    for _, row in df.iterrows():
        accuracy = row['accuracy_percent']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏
        if accuracy >= 70:
            emoji = "üü¢"
        elif accuracy >= 50:
            emoji = "üü°"
        else:
            emoji = "üî¥"
        
        print(f"\n{emoji} {row['sport']} | {row['country']} | {row['championship']}")
        print(f"   –¢–∏–ø –ø—Ä–æ–≥–Ω–æ–∑–∞: {row['forecast_type']}")
        print(f"   –í—Å–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {row['total_predictions']}")
        print(f"   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {row['correct_predictions']} ({accuracy:.2f}%)")
        print(f"   ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {row['incorrect_predictions']}")
        print(f"   üìÖ –ü–µ—Ä–∏–æ–¥: {row['first_prediction']} - {row['last_prediction']}")


def print_summary_report(df: pd.DataFrame, title: str):
    """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç."""
    print("\n" + "=" * 120)
    print(f"{title}")
    print("=" * 120)
    
    if df.empty:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    print(f"\n{'–õ–∏–≥–∞':<60} | {'–ü—Ä–æ–≥–Ω–æ–∑–æ–≤':<10} | {'–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö':<12} | {'–¢–æ—á–Ω–æ—Å—Ç—å':<10}")
    print("-" * 120)
    
    for _, row in df.iterrows():
        accuracy = row['accuracy_percent']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏
        if accuracy >= 70:
            emoji = "üü¢"
        elif accuracy >= 50:
            emoji = "üü°"
        else:
            emoji = "üî¥"
        
        league_name = f"{row['sport']} - {row['country']} - {row['championship']}"
        if len(league_name) > 57:
            league_name = league_name[:54] + "..."
        
        print(f"{emoji} {league_name:<57} | {row['total_predictions']:<10} | {row['correct_predictions']:<12} | {accuracy:.2f}%")


def print_forecast_type_report(df: pd.DataFrame):
    """–í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–≥–Ω–æ–∑–æ–≤."""
    print("\n" + "=" * 100)
    print("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú –ü–†–û–ì–ù–û–ó–û–í")
    print("=" * 100)
    
    if df.empty:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    print(f"\n{'–¢–∏–ø –ø—Ä–æ–≥–Ω–æ–∑–∞':<20} | {'–ü—Ä–æ–≥–Ω–æ–∑–æ–≤':<10} | {'–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö':<12} | {'–¢–æ—á–Ω–æ—Å—Ç—å':<10} | {'–õ–∏–≥':<6}")
    print("-" * 100)
    
    for _, row in df.iterrows():
        accuracy = row['accuracy_percent']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏
        if accuracy >= 70:
            emoji = "üü¢"
        elif accuracy >= 50:
            emoji = "üü°"
        else:
            emoji = "üî¥"
        
        print(f"{emoji} {row['forecast_type']:<18} | {row['total_predictions']:<10} | {row['correct_predictions']:<12} | {accuracy:.2f}%      | {row['leagues_count']:<6}")


def save_to_csv(df: pd.DataFrame, filename: str, sort_by_accuracy: bool = True):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV.
    
    Args:
        df: DataFrame –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        filename: –ò–º—è —Ñ–∞–π–ª–∞
        sort_by_accuracy: –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ç–æ—á–Ω–æ—Å—Ç–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
    """
    if sort_by_accuracy and 'accuracy_percent' in df.columns:
        df = df.sort_values('accuracy_percent', ascending=False)
    
    df.to_csv(filename, index=False, encoding='utf-8')
    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("\n" + "=" * 120)
    print("–ê–ù–ê–õ–ò–ó –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ü–†–û–ì–ù–û–ó–û–í")
    print(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 120)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    min_predictions = 10
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        if sys.argv[1] in ['-h', '--help', 'help']:
            print("""
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python analyze_predictions.py [MIN_PREDICTIONS]

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
  MIN_PREDICTIONS  –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –æ—Ç—á–µ—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)

–ü—Ä–∏–º–µ—Ä—ã:
  python analyze_predictions.py           # –ú–∏–Ω–∏–º—É–º 10 –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
  python analyze_predictions.py 50        # –ú–∏–Ω–∏–º—É–º 50 –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
  python analyze_predictions.py 100       # –ú–∏–Ω–∏–º—É–º 100 –ø—Ä–æ–≥–Ω–æ–∑–æ–≤

–û—Ç—á–µ—Ç—ã:
  1. –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–∏–≥–∞–º
  2. –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–∏–≥–∞–º –∏ —Ç–∏–ø–∞–º –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
  3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
            """)
            return
        
        try:
            min_predictions = int(sys.argv[1])
            logger.info(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {min_predictions}")
        except ValueError:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: {sys.argv[1]}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {min_predictions}")
    
    # 1. –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–∏–≥–∞–º
    logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ª–∏–≥–∞–º...")
    df_summary = analyze_by_league_summary(min_predictions)
    print_summary_report(df_summary, "–°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –õ–ò–ì–ê–ú")
    save_to_csv(df_summary, f'results/prediction_stats_by_league_{datetime.now().strftime("%Y%m%d")}.csv')
    
    # 2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
    logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–≥–Ω–æ–∑–æ–≤...")
    df_types = analyze_by_forecast_type(min_predictions)
    print_forecast_type_report(df_types)
    save_to_csv(df_types, f'results/prediction_stats_by_type_{datetime.now().strftime("%Y%m%d")}.csv')
    
    # 3. –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    df_detailed = analyze_by_league_and_type(min_predictions=min_predictions)
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ç–æ—á–Ω–æ—Å—Ç–∏
    df_detailed_sorted = df_detailed.sort_values('accuracy_percent', ascending=False)
    print_detailed_report(df_detailed_sorted, "–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –õ–ò–ì–ê–ú –ò –¢–ò–ü–ê–ú –ü–†–û–ì–ù–û–ó–û–í (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏)")
    save_to_csv(df_detailed, f'results/prediction_stats_detailed_{datetime.now().strftime("%Y%m%d")}.csv')
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 120)
    print("–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 120)
    print(f"–í—Å–µ–≥–æ –ª–∏–≥ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(df_summary)}")
    print(f"–í—Å–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {df_summary['total_predictions'].sum()}")
    print(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {df_summary['correct_predictions'].sum()}")
    print(f"–û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {(df_summary['correct_predictions'].sum() / df_summary['total_predictions'].sum() * 100):.2f}%")
    print("=" * 120)
    
    logger.info("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")


if __name__ == '__main__':
    main()

