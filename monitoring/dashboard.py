# izhbet/monitoring/dashboard.py
"""
–î–∞—à–±–æ—Ä–¥ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–æ–¥–µ–ª–µ–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–≤.
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
from typing import List, Dict, Any

from db.queries.metrics import (
    get_available_championships,
    get_metrics_by_championship,
    get_models_by_championship,
    get_metrics_history,
    get_championship_stats
)


class ChampionshipMonitoringDashboard:
    """–î–∞—à–±–æ—Ä–¥ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–æ–¥–µ–ª–µ–π –ø–æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞–º."""

    def run_dashboard(self):
        """–ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞."""
        st.set_page_config(
            page_title="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–æ–¥–µ–ª–µ–π –ø–æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞–º",
            layout="wide"
        )
        st.title("üèÜ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–µ–π –ø–æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞–º")

        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞—Ö
        championships = self._get_available_championships()

        if not championships:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞—Ö. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–Ω–∞—á–∞–ª–∞.")
            return

        # –°–∞–π–¥–±–∞—Ä —Å –≤—ã–±–æ—Ä–æ–º —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞
        st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")

        # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        view_mode = st.sidebar.radio(
            "–†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞",
            ["–û–±–∑–æ—Ä —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–≤", "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞", "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–≤"]
        )

        # –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
        days = st.sidebar.slider("–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ (–¥–Ω–∏)", 1, 90, 30)

        if view_mode == "–û–±–∑–æ—Ä —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–≤":
            self.show_championships_overview(championships, days)
        elif view_mode == "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞":
            self.show_championship_details(championships, days)
        else:
            self.show_championships_comparison(championships, days)

    def _get_available_championships(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–≤."""
        try:
            championships = get_available_championships()
            return sorted(championships, key=lambda x: x['name'])
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–≤: {e}")
            return []

    def show_championships_overview(self, championships: List[Dict], days: int):
        """–û–±–∑–æ—Ä–Ω–∞—è –ø–∞–Ω–µ–ª—å –≤—Å–µ—Ö —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–≤."""
        st.header("üìä –û–±–∑–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–µ–π –ø–æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞–º")

        # –°–±–æ—Ä —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        summary_data = []

        for championship in championships:
            try:
                champ_stats = get_championship_stats(championship['id'])
                models = get_models_by_championship(championship['id'])
                summary_data.append({
                    '–ß–µ–º–ø–∏–æ–Ω–∞—Ç': championship['name'],
                    'ID': championship['id'],
                    '–ú–æ–¥–µ–ª–µ–π': len(models),
                    '–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å': champ_stats['avg_accuracy'],
                    '–í—Å–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π': champ_stats['total_predictions'],
                    '–õ—É—á—à–∞—è –º–æ–¥–µ–ª—å': champ_stats['best_model'],
                    '–•—É–¥—à–∞—è –º–æ–¥–µ–ª—å': champ_stats['worst_model']
                })
            except Exception as e:
                st.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞ {championship['name']}: {e}")
                continue

        if not summary_data:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return

        df_summary = pd.DataFrame(summary_data)

        # –í–∫–ª–∞–¥–∫–∏ —Å —Ä–∞–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        tab1, tab2, tab3 = st.tabs(["–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞", "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", "–¢–æ–ø —á–µ–º–ø–∏–æ–Ω–∞—Ç—ã"])

        with tab1:
            st.dataframe(
                df_summary.style.format({
                    '–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å': '{:.2%}',
                    '–í—Å–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π': '{:,}'
                }).background_gradient(subset=['–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å'], cmap='RdYlGn'),
                use_container_width=True
            )

        with tab2:
            # Heatmap —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞–º
            fig = px.imshow(
                df_summary.pivot_table(values='–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å', index='–ß–µ–º–ø–∏–æ–Ω–∞—Ç', aggfunc='mean'),
                title='–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π –ø–æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞–º',
                color_continuous_scale='RdYlGn'
            )
            st.plotly_chart(fig, use_container_width=True)

            # Scatter plot: —Ç–æ—á–Ω–æ—Å—Ç—å vs –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            fig = px.scatter(
                df_summary,
                x='–í—Å–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π',
                y='–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å',
                size='–ú–æ–¥–µ–ª–µ–π',
                color='–ß–µ–º–ø–∏–æ–Ω–∞—Ç',
                hover_name='–ß–µ–º–ø–∏–æ–Ω–∞—Ç',
                title='–¢–æ—á–Ω–æ—Å—Ç—å vs –û–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö –ø–æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞–º'
            )
            st.plotly_chart(fig, use_container_width=True)

        with tab3:
            # –¢–æ–ø-5 —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–≤ –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏
            top_championships = df_summary.nlargest(5, '–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å')
            fig = px.bar(
                top_championships,
                x='–ß–µ–º–ø–∏–æ–Ω–∞—Ç',
                y='–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å',
                title='–¢–æ–ø-5 —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–≤ –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤',
                color='–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å',
                color_continuous_scale='RdYlGn'
            )
            st.plotly_chart(fig, use_container_width=True)

    def show_championship_details(self, championships: List[Dict], days: int):
        """–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —á–µ–º–ø–∏–æ–Ω–∞—Ç—É."""
        st.header("üîç –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞")

        # –í—ã–±–æ—Ä —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞
        championship_options = {champ['name']: champ for champ in championships}
        selected_champ_name = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–º–ø–∏–æ–Ω–∞—Ç",
            list(championship_options.keys())
        )

        selected_champ = championship_options[selected_champ_name]

        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç—Ä–∏–∫ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞
        try:
            models = get_models_by_championship(selected_champ['id'])
            if not models:
                st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞ {selected_champ_name}")
                return
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞: {e}")
            return

        # –í–∫–ª–∞–¥–∫–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        tab1, tab2, tab3, tab4 = st.tabs(["–û–±–∑–æ—Ä", "–ú–æ–¥–µ–ª–∏", "–¢—Ä–µ–Ω–¥—ã", "–ò—Å—Ç–æ—Ä–∏—è"])

        with tab1:
            self._show_championship_overview(selected_champ, models)

        with tab2:
            self._show_models_details(models, selected_champ)

        with tab3:
            self._show_trends_tab(models, selected_champ, days)

        with tab4:
            self._show_history_tab(selected_champ['id'])

    def _show_championship_overview(self, championship: Dict, models: List[Dict]):
        """–û–±–∑–æ—Ä–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —á–µ–º–ø–∏–æ–Ω–∞—Ç—É."""
        col1, col2, col3 = st.columns(3)

        stats = get_championship_stats(championship['id'])

        with col1:
            st.metric("–í—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π", stats['total_models'])
            st.metric("–í—Å–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π", f"{stats['total_predictions']:,}")

        with col2:
            st.metric("–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å", f"{stats['avg_accuracy']:.2%}")
            st.metric("–õ—É—á—à–∞—è –º–æ–¥–µ–ª—å", stats['best_model'])

        with col3:
            st.metric("–•—É–¥—à–∞—è –º–æ–¥–µ–ª—å", stats['worst_model'])
            st.metric("–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å", stats['stability'])

        # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ –º–æ–¥–µ–ª—è–º
        model_accuracies = []
        for model in models:
            # –î–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º accuracy
            if model.get('accuracy') and model['accuracy'] > 0:
                model_accuracies.append({
                    '–ú–æ–¥–µ–ª—å': model['model_name'], 
                    '–¢–æ—á–Ω–æ—Å—Ç—å': model['accuracy']
                })
            # –î–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ MAE (—á–µ–º –º–µ–Ω—å—à–µ MAE, —Ç–µ–º –ª—É—á—à–µ)
            elif model.get('mae') and model['mae'] > 0:
                # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è MAE –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏
                mae_value = model['mae']
                model_name = model['model_name']
                
                # –†–∞–∑–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–æ–¥–µ–ª–µ–π
                if 'total_amount' in model_name:
                    # –î–ª—è –º–æ–¥–µ–ª–µ–π –æ–±—â–µ–≥–æ —Ç–æ—Ç–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥
                    max_mae = 5.0
                elif 'total_home' in model_name or 'total_away' in model_name:
                    # –î–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ç–æ—Ç–∞–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–∏–π –ø–æ—Ä–æ–≥
                    max_mae = 3.0
                else:
                    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä–æ–≥
                    max_mae = 2.0
                
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º MAE –∫ [0,1] —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –ø–æ—Ä–æ–≥–æ–º
                normalized_mae = min(mae_value / max_mae, 1.0)
                accuracy_score = 1 - normalized_mae
                
                model_accuracies.append({
                    '–ú–æ–¥–µ–ª—å': f"{model['model_name']} (MAE: {mae_value:.2f})",
                    '–¢–æ—á–Ω–æ—Å—Ç—å': accuracy_score
                })

        if model_accuracies:
            df_acc = pd.DataFrame(model_accuracies)
            fig = px.bar(df_acc, x='–ú–æ–¥–µ–ª—å', y='–¢–æ—á–Ω–æ—Å—Ç—å',
                         title='–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π –≤ —á–µ–º–ø–∏–æ–Ω–∞—Ç–µ')
            st.plotly_chart(fig, use_container_width=True)

    def _show_models_details(self, models: List[Dict], championship: Dict):
        """–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –º–æ–¥–µ–ª—è–º —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞."""
        st.subheader("–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –º–æ–¥–µ–ª—è–º")

        model_names = [model['model_name'] for model in models]
        selected_model_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å", model_names)

        if selected_model_name:
            selected_model = next((m for m in models if m['model_name'] == selected_model_name), None)
            
            if selected_model:
                col1, col2 = st.columns(2)

                with col1:
                    st.write("**–¢–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏:**")
                    # –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    if selected_model.get('accuracy') is not None:
                        st.metric("Accuracy", f"{selected_model['accuracy']:.2%}")
                    if selected_model.get('precision') is not None:
                        st.metric("Precision", f"{selected_model['precision']:.3f}")
                    if selected_model.get('recall') is not None:
                        st.metric("Recall", f"{selected_model['recall']:.3f}")
                    if selected_model.get('f1_score') is not None:
                        st.metric("F1 Score", f"{selected_model['f1_score']:.3f}")
                    
                    # –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
                    if selected_model.get('mae') is not None:
                        st.metric("MAE", f"{selected_model['mae']:.3f}")
                    if selected_model.get('mse') is not None:
                        st.metric("MSE", f"{selected_model['mse']:.3f}")
                    if selected_model.get('rmse') is not None:
                        st.metric("RMSE", f"{selected_model['rmse']:.3f}")
                    if selected_model.get('min_error') is not None:
                        st.metric("Min Error", f"{selected_model['min_error']:.3f}")
                    if selected_model.get('max_error') is not None:
                        st.metric("Max Error", f"{selected_model['max_error']:.3f}")

                with col2:
                    st.write("**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:**")
                    st.write(f"**–¢–∏–ø –º–æ–¥–µ–ª–∏:** {selected_model.get('model_type', 'N/A')}")
                    st.write(f"**–î–∞—Ç–∞ –æ–±—É—á–µ–Ω–∏—è:** {selected_model.get('training_date', 'N/A')}")
                    st.write(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {selected_model.get('model_name', 'N/A')}")

    def _show_trends_tab(self, models: List[Dict], championship: Dict, days: int):
        """–í–∫–ª–∞–¥–∫–∞ —Å —Ç—Ä–µ–Ω–¥–∞–º–∏ –º–æ–¥–µ–ª–µ–π —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞."""
        st.subheader("–¢—Ä–µ–Ω–¥—ã –º–µ—Ç—Ä–∏–∫")

        # –ú—É–ª—å—Ç–∏—Å–µ–ª–µ–∫—Ç –º–æ–¥–µ–ª–µ–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        model_names = [model['model_name'] for model in models]
        selected_models = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è",
            model_names,
            default=model_names[:2] if len(model_names) >= 2 else []
        )

        if not selected_models:
            return

        fig = go.Figure()

        for model_name in selected_models:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–µ—Ç—Ä–∏–∫ –¥–ª—è –º–æ–¥–µ–ª–∏
                history = get_metrics_history(championship['id'], model_name, days)
                
                if not history:
                    continue

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
                timestamps = []
                accuracies = []
                mae_values = []

                for record in history:
                    timestamp = record['training_date']
                    timestamps.append(timestamp)
                    
                    # –î–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º accuracy
                    accuracy = record.get('accuracy', 0)
                    if accuracy and accuracy > 0:
                        accuracies.append(accuracy)
                    else:
                        accuracies.append(None)
                    
                    # –î–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º MAE
                    mae = record.get('mae', 0)
                    if mae and mae > 0:
                        mae_values.append(mae)
                    else:
                        mae_values.append(None)

                if timestamps:
                    # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é —Ç–æ—á–Ω–æ—Å—Ç–∏ (–¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏)
                    if any(acc is not None for acc in accuracies):
                        fig.add_trace(go.Scatter(
                            x=timestamps,
                            y=accuracies,
                            name=f"{model_name} (Accuracy)",
                            mode='lines+markers',
                            line=dict(dash='solid'),
                            yaxis='y'
                        ))
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é MAE (–¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏)
                    if any(mae is not None for mae in mae_values):
                        fig.add_trace(go.Scatter(
                            x=timestamps,
                            y=mae_values,
                            name=f"{model_name} (MAE)",
                            mode='lines+markers',
                            line=dict(dash='dash'),
                            yaxis='y2'
                        ))
            except Exception as e:
                st.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –º–æ–¥–µ–ª–∏ {model_name}: {e}")
                continue

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π –¥–ª—è –¥–≤–æ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
        fig.update_layout(
            title=f"–¢—Ä–µ–Ω–¥—ã –º–µ—Ç—Ä–∏–∫ –º–æ–¥–µ–ª–µ–π –≤ {championship['name']}",
            xaxis_title="–î–∞—Ç–∞",
            hovermode='x unified',
            yaxis=dict(
                title="–¢–æ—á–Ω–æ—Å—Ç—å (Accuracy)",
                side="left",
                range=[0, 1]
            ),
            yaxis2=dict(
                title="MAE (Mean Absolute Error)",
                side="right",
                overlaying="y",
                range=[0, None]
            )
        )

        st.plotly_chart(fig, use_container_width=True)

    def show_championships_comparison(self, championships: List[Dict], days: int):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–≤ –º–µ–∂–¥—É —Å–æ–±–æ–π."""
        st.header("üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–≤")

        # –í—ã–±–æ—Ä —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        championship_names = [champ['name'] for champ in championships]
        selected_championships = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–º–ø–∏–æ–Ω–∞—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è",
            championship_names,
            default=championship_names[:3] if len(championship_names) >= 3 else championship_names
        )

        if not selected_championships:
            return

        # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        comparison_data = []

        for champ_name in selected_championships:
            champ = next((c for c in championships if c['name'] == champ_name), None)
            if not champ:
                continue

            try:
                stats = get_championship_stats(champ['id'])
                models = get_models_by_championship(champ['id'])
                comparison_data.append({
                    '–ß–µ–º–ø–∏–æ–Ω–∞—Ç': champ_name,
                    '–¢–æ—á–Ω–æ—Å—Ç—å': stats['avg_accuracy'],
                    '–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è': stats['total_predictions'],
                    '–ú–æ–¥–µ–ª–∏': len(models)
                })
            except Exception as e:
                st.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞ {champ_name}: {e}")
                continue

        if not comparison_data:
            return

        df_comparison = pd.DataFrame(comparison_data)

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        col1, col2 = st.columns(2)

        with col1:
            fig = px.bar(
                df_comparison,
                x='–ß–µ–º–ø–∏–æ–Ω–∞—Ç',
                y='–¢–æ—á–Ω–æ—Å—Ç—å',
                title='–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–≤',
                color='–¢–æ—á–Ω–æ—Å—Ç—å',
                color_continuous_scale='RdYlGn'
            )
            st.plotly_chart(fig, use_container_width=True)

        with col2:
            fig = px.scatter(
                df_comparison,
                x='–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è',
                y='–¢–æ—á–Ω–æ—Å—Ç—å',
                size='–ú–æ–¥–µ–ª–∏',
                color='–ß–µ–º–ø–∏–æ–Ω–∞—Ç',
                title='–¢–æ—á–Ω–æ—Å—Ç—å vs –û–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö'
            )
            st.plotly_chart(fig, use_container_width=True)


    def _show_history_tab(self, championship_id: int):
        """–í–∫–ª–∞–¥–∫–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π."""
        st.subheader("–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –º–µ—Ç—Ä–∏–∫")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–µ—Ç—Ä–∏–∫ –¥–ª—è —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞
            history = get_metrics_history(championship_id, days=90)
            
            if not history:
                st.info("–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                return

            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            df_history = pd.DataFrame(history)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∏—Å—Ç–æ—Ä–∏–µ–π
            st.dataframe(
                df_history.style.format({
                    'accuracy': '{:.2%}',
                    'precision': '{:.3f}',
                    'recall': '{:.3f}',
                    'f1_score': '{:.3f}'
                }),
                use_container_width=True
            )
            
            # –ì—Ä–∞—Ñ–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ –≤—Å–µ–º –º–æ–¥–µ–ª—è–º
            if 'accuracy' in df_history.columns:
                fig = px.line(
                    df_history, 
                    x='training_date', 
                    y='accuracy',
                    color='model_name',
                    title='–ò—Å—Ç–æ—Ä–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π'
                )
                st.plotly_chart(fig, use_container_width=True)
                
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –º–µ—Ç—Ä–∏–∫: {e}")


# –ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞
if __name__ == '__main__':
    dashboard = ChampionshipMonitoringDashboard()
    dashboard.run_dashboard()