"""
–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∏—Ç–æ–≥–æ–≤ –º–∞—Ç—á–µ–π (regular –∏ quality).
"""

import logging
from datetime import date
from typing import List, Dict

from publisher.forecast_helpers import get_feature_description
from db.queries.target import get_target_by_match_id
from core.prediction_validator import get_prediction_status_from_target

logger = logging.getLogger(__name__)


def _format_match_result_type(type_outcome: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–∏–ø –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–∞—Ç—á–∞.
    
    Args:
        type_outcome: –¢–∏–ø –æ–∫–æ–Ω—á–∞–Ω–∏—è (ot, ap, –∏–ª–∏ None)
        
    Returns:
        str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    if not type_outcome:
        return ""
    
    type_mapping = {
        'ot': ' (–û–≤–µ—Ä—Ç–∞–π–º)',
        'ap': ' (–ü–µ–Ω–∞–ª—å—Ç–∏)',
        'so': ' (–ë—É–ª–ª–∏—Ç—ã)',
        'et': ' (–î–æ–ø. –≤—Ä–µ–º—è)',
    }
    
    return type_mapping.get(type_outcome.lower(), f' ({type_outcome.upper()})')


class OutcomeFormatter:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Ç–æ–≥–æ–≤ –º–∞—Ç—á–µ–π –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç."""
    
    def format_daily_outcomes_regular(self, outcomes_data: List[Dict], target_date: date) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç regular –∏—Ç–æ–≥–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç.
        
        Args:
            outcomes_data: –°–ø–∏—Å–æ–∫ —Å –∏—Ç–æ–≥–∞–º–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞—Ç—á–∞—Ö
            target_date: –î–∞—Ç–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
        """
        report = f"üèÅ –ò–¢–û–ì–ò –ú–ê–¢–ß–ï–ô - {target_date.strftime('%d.%m.%Y')}\n\n"
        
        for item in outcomes_data:
            match = item['match']
            outcomes = item['outcomes']
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∏–ø –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–∞—Ç—á–∞
            result_type = _format_match_result_type(match.get('typeOutcome'))
            
            report += f"üÜî Match ID: {match['id']}\n"
            report += f"üèÜ {match.get('sportName', 'Unknown')} - {match.get('championshipName', 'Unknown')}\n"
            report += f"‚öΩ {match.get('team_home_name', 'Unknown')} vs {match.get('team_away_name', 'Unknown')}\n"
            report += f"üìä –°—á–µ—Ç: {match.get('numOfHeadsHome', '-')} : {match.get('numOfHeadsAway', '-')}{result_type}\n\n"
            report += f"üìã –ò–¢–û–ì–ò –ü–†–û–ì–ù–û–ó–û–í:\n\n"
            
            for outcome in outcomes:
                feature = outcome.get('feature', 0)
                outcome_value = outcome.get('outcome', '')
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≥–Ω–æ–∑–∞
                status = self._determine_prediction_status(feature, outcome_value, match['id'])
                feature_desc = get_feature_description(feature, outcome_value)
                
                report += f"{status} ‚Ä¢ {feature_desc}: {outcome_value}\n"
            
            report += "\n"
        
        return report
    
    def format_daily_outcomes_quality(self, outcomes_data: List[Dict], target_date: date) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç quality –∏—Ç–æ–≥–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç.
        
        Args:
            outcomes_data: –°–ø–∏—Å–æ–∫ —Å –∏—Ç–æ–≥–∞–º–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞—Ç—á–∞—Ö
            target_date: –î–∞—Ç–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
        """
        report = f"üèÅ –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ï –ò–¢–û–ì–ò –ú–ê–¢–ß–ï–ô - {target_date.strftime('%d.%m.%Y')}\n\n"
        
        for item in outcomes_data:
            match = item['match']
            outcomes = item['outcomes']
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∏–ø –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–∞—Ç—á–∞
            result_type = _format_match_result_type(match.get('typeOutcome'))
            
            report += f"üèÜ {match.get('sportName', 'Unknown')} - {match.get('championshipName', 'Unknown')}\n"
            report += f"üÜî Match ID: {match['id']}\n"
            report += f"‚öΩ {match.get('team_home_name', 'Unknown')} vs {match.get('team_away_name', 'Unknown')}\n"
            report += f"üìä –°—á–µ—Ç: {match.get('numOfHeadsHome', '-')} : {match.get('numOfHeadsAway', '-')}{result_type}\n\n"
            report += f"üìã –ò–¢–û–ì–ò –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–• –ü–†–û–ì–ù–û–ó–û–í:\n\n"
            
            for stat in outcomes:
                forecast_type = stat.get('forecast_type', '')
                forecast_subtype = stat.get('forecast_subtype', '')
                prediction_correct = stat.get('prediction_correct', None)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                if prediction_correct is None:
                    status = '‚è≥'
                elif prediction_correct:
                    status = '‚úÖ'
                else:
                    status = '‚ùå'
                
                report += f"{status} ‚Ä¢ {forecast_type}: {forecast_subtype}\n"
            
            report += "\n"
        
        return report
    
    def _determine_prediction_status(self, feature: int, outcome: str, match_id: int) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ target –∏–∑ –ë–î.
        
        Args:
            feature: –ö–æ–¥ feature (1-10)
            outcome: –ü—Ä–æ–≥–Ω–æ–∑ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã outcomes
            match_id: ID –º–∞—Ç—á–∞
            
        Returns:
            str: '‚úÖ' –µ—Å–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, '‚ùå' –µ—Å–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, '‚è≥' –µ—Å–ª–∏ –º–∞—Ç—á –Ω–µ —Å–æ—Å—Ç–æ—è–ª—Å—è
        """
        try:
            target = get_target_by_match_id(match_id)
            return get_prediction_status_from_target(feature, outcome, target)
            
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è feature {feature}, match {match_id}: {e}')
            return '‚ùå'

