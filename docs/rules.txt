- Отвечай на русском языке
- Не выдавай высокоуровневые ответы, твоя задача дать конкретное решение применимое к проекту
- При генерации код основывайся на паттернах проектирования
- Применяй PEP8

---
alwaysApply: true
---

izhbet/
├── getting/          # Получение данных о спортивных событиях с API stat-api.baltbet.ru
├── calculation/      # Расчет турнирных таблиц, рейтингов команд и статистических показателей
├── processing/       # Создание и обучение нейронных сетей, генерация прогнозов
├── forecast/         # Генерация конформных прогнозов с интервалами неопределенности
├── publisher/        # Публикация прогнозов в различные каналы
├── core/            # Общие компоненты и утилиты
├── db/              # Работа с базой данных
└── monitoring/      # Мониторинг качества

- Модуль: запускающий код - getting.py, основной код в каталоге: getting, это получение данные по API для дальнейшей обработки и сохранение в базу данных, как основу для прогнозирования спортивного события.
- Модуль: запускающий код - calculation.py, основной код в каталоге: calculation, на основе данных турнирной таблице, путем расчета получаем данные (фичи) для построения модели глубокой нейронной сети.
- Модуль: запускающий код - processing.py, основной код в каталоге: processing, для создания модели нейронной сети и прогнозирование каждого отдельного матча. Модели строятся для каждого чемпионата, отдельный набор моделей. Отбор фичей по MI, удаление слабых/шумовых признаков. Применяется конформного прогнозирование.
- Модуль: запускающий код - forecast.py, основной код в каталоге: forecast, для создания прогноза на исход спортивного события. Применяется конформного прогнозирование. Отбор признаков и др.
- Модуль: запускающий код - publisher.py, основной код в каталоге: publisher, публикация основных прогнозов в различные источники (социальные сети, телеграмм каналы, сайты, отправка по почте и т.д.).
- Всегда где возможно, применяем многопроцессорный подход, реализовано в core/consumer.py, код отлажен и применяется во всех модулях, его не меняем.
- В многопроцессорной обработке используем db_session_pool из config.py. Код находиться d core/consumer.py (его не изменять!!!)
- Для работы с данными используй ORM SQLAlchemy, код сохранение данных называем по имени модуля в каталог db/storage, код получение данных храним в папке db/queries с названием модуля.
- При публикации прогноза используем 2 вида прогнозов regular (из таблицы outcomes) и quality (из таблицы statistics), создаем на каждый день прогноз (каталог forecast) и итоги (каталог outcome)
- Расширенная статистика с нейронными данными (вероятность, уверенность, неопределенность, границы достоверности,️ калибровка, стабильность, историческая точность, последние 10).
- Параметры в скриптах ALL_TIME означают выборку матчей за весь игровой сезон из таблицы matchs.
- Параметры в скриптах TODAY означают выборку матчей за сегодня (для итогов еще и за вчера) из таблицы matchs.
- Если в процессе обработки данных выясниться что матч (данные из matchs) должен состоятся, а расчетных данных нет (нет информации в таблицах standings, features, predictions, outcomes, statistics) генерируем исключение и сохраняем информацию в логах.

===


===

У нас готов проект который состоит из:
- модуля - getting (запуск getting.py, каталог размещения кода модуля getting, получение данных из API, спортивная статистика)
- модуля - calculation (запуск calculation.py, каталог размещения кода модуля calculation, расчет фичей и построение эмбедингов)
- модуля - processing (запуск processing.py, каталог размещения кода модуля processing, построение модели НС на исторических данных и выполнение прогноза на данных из будущего с использованием конформного прогнозирование)
- модуля - forecast (запуск forecast.py, каталог размещения кода модуля forecast, формирование отбора наилучших прогнозов исходя из исторических данных)
- модуля - publisher (запуск publisher.py, каталог размещения кода модуля publisher, отправка и публикация прогнозов)
Как видно из структуры проекта модуль processing.py занимается построением модели глубокой нейронной сети и выполняет прогнозы используя приемы конформного прогнозирование.
Обобщая, таблице prediction - прогнозные веса после обработки нейронной сети, в outcomes - прогнозы после конформного прогнозирование.
Общий смысл модуля forecast, в том что на основании выполненных прогнозов и собранной статистики за прошлые периоды сгенерировать наиболее вероятные (качественные) прогнозы исходя из статистики прогнозов выполненных ранее.
Качественные прогнозы располагаются в таблице statistic (которую позже расширим коэффициентами и иными данным, как расчета доходности)
Согласно выше описанному давай внесем изменения в проект, что бы каждый модуль отвечал за свой участок работы.
Предложи план и поэтапно будем вносить изменения и тестировать результат.