#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ conformal_predictor –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å statistics_optimized.
"""

import logging
import sys
from datetime import datetime

from processing.conformal_predictor import ConformalPredictor
from config import Session_pool
from sqlalchemy import text

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def test_conformal_predictor():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç conformal_predictor –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å statistics_optimized."""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CONFORMAL_PREDICTOR")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    with Session_pool() as session:
        result = session.execute(text('SELECT COUNT(*) FROM statistics_optimized')).fetchone()
        current_statistics = result[0] if result else 0
        
        result = session.execute(text('SELECT COUNT(*) FROM outcomes')).fetchone()
        current_outcomes = result[0] if result else 0
        
        print(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"   statistics_optimized: {current_statistics} –∑–∞–ø–∏—Å–µ–π")
        print(f"   outcomes: {current_outcomes} –∑–∞–ø–∏—Å–µ–π")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä ConformalPredictor
        print("\\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ ConformalPredictor...")
        predictor = ConformalPredictor()
        print("‚úÖ ConformalPredictor —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–≤
        print("\\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–≤...")
        tournament_ids = predictor.get_tournament_ids()
        print(f"   –ù–∞–π–¥–µ–Ω–æ {len(tournament_ids)} —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–≤")
        
        if not tournament_ids:
            print("‚ùå –ù–µ—Ç —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
        
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_tournament_ids = tournament_ids[:3]
        print(f"   –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ {len(test_tournament_ids)} —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞—Ö: {test_tournament_ids}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        print("\\nüöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        result = predictor.create_conformal_predictions(test_tournament_ids)
        
        if result['success']:
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:")
            print(f"   –í—Å–µ–≥–æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–≤: {result['total_tournaments']}")
            print(f"   –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result['successful']}")
            print(f"   –û—à–∏–±–æ–∫: {result['failed']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print("\\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
            for i, res in enumerate(result['results']):
                print(f"   –ß–µ–º–ø–∏–æ–Ω–∞—Ç {test_tournament_ids[i]}: {res}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        print("\\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        with Session_pool() as session:
            result = session.execute(text('SELECT COUNT(*) FROM statistics_optimized')).fetchone()
            new_statistics = result[0] if result else 0
            
            result = session.execute(text('SELECT COUNT(*) FROM outcomes')).fetchone()
            new_outcomes = result[0] if result else 0
            
            print(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
            print(f"   statistics_optimized: {new_statistics} –∑–∞–ø–∏—Å–µ–π (+{new_statistics - current_statistics})")
            print(f"   outcomes: {new_outcomes} –∑–∞–ø–∏—Å–µ–π (+{new_outcomes - current_outcomes})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ statistics_optimized
            if new_statistics > current_statistics:
                result = session.execute(text('''
                    SELECT id, outcome_id, match_id, forecast_type, forecast_subtype, 
                           model_name, actual_result, created_at
                    FROM statistics_optimized 
                    ORDER BY id DESC 
                    LIMIT 5
                ''')).fetchall()
                
                print(f"\\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ statistics_optimized:")
                for row in result:
                    print(f"   ID: {row[0]}, Outcome: {row[1]}, Match: {row[2]}")
                    print(f"   –¢–∏–ø: {row[3]}, –ü–æ–¥—Ç–∏–ø: {row[4]}, –ú–æ–¥–µ–ª—å: {row[5]}")
                    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {row[6]}, –°–æ–∑–¥–∞–Ω–æ: {row[7]}")
                    print("   ---")
            else:
                print("‚ö†Ô∏è –ù–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤ statistics_optimized –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        print("\\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    test_conformal_predictor()
