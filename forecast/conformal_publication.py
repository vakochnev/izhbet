# izhbet/forecast/conformal_publication.py
"""
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–æ—Ä–º–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã outcomes.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–Ω—Ñ–æ—Ä–º–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤.
"""

import warnings
import logging
import pandas as pd
from typing import List, Dict, Optional
from datetime import datetime, timedelta
from pathlib import Path

from .forecast import ForecastFormatter
from core.constants import today, yesterday
from config import Session_pool
from sqlalchemy import text

warnings.filterwarnings(
    action='ignore',
    category=FutureWarning
)

logger = logging.getLogger(__name__)


class ConformalForecastGenerator:
    """
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ñ–æ—Ä–º–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã outcomes, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç:
    - –ö–æ–Ω—Ñ–æ—Ä–º–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏
    - –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏
    - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–≥–Ω–æ–∑–∞—Ö
    """
    
    def __init__(self):
        self.formatter = ForecastFormatter()
        
        # –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        self.feature_mapping = {
            1: 'win_draw_loss',
            2: 'oz',
            3: 'goal_home',
            4: 'goal_away',
            5: 'total',
            6: 'total_home',
            7: 'total_away',
            8: 'total_amount',
            9: 'total_home_amount',
            10: 'total_away_amount'
        }


    def load_conformal_forecasts(self, date_filter: Optional[datetime] = None) -> pd.DataFrame:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–æ—Ä–º–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã outcomes.
        
        Args:
            date_filter: –î–∞—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ None, –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ)
            
        Returns:
            DataFrame —Å –∫–æ–Ω—Ñ–æ—Ä–º–Ω—ã–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
        """
        logger.info('–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–æ—Ä–º–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã outcomes')
        
        from db.queries.forecast import get_conformal_forecasts_for_today, get_forecasts_for_date
        
        if date_filter:
            df = get_forecasts_for_date(date_filter.date())
        else:
            df = get_conformal_forecasts_for_today()
        
        if not df.empty:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
            df['forecast_type'] = df['feature'].map(self.feature_mapping)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É
            df['gameData'] = pd.to_datetime(df['gameData'])
            
            logger.info(f'–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∫–æ–Ω—Ñ–æ—Ä–º–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤')
        else:
            logger.warning('–ö–æ–Ω—Ñ–æ—Ä–º–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
        
        return df

    def load_today_forecasts(self) -> pd.DataFrame:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
        return self.load_conformal_forecasts(today)

    def load_yesterday_outcomes(self) -> pd.DataFrame:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ö–æ–¥—ã –≤—á–µ—Ä–∞—à–Ω–∏—Ö –º–∞—Ç—á–µ–π —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
        logger.info('–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ö–æ–¥–æ–≤ –≤—á–µ—Ä–∞—à–Ω–∏—Ö –º–∞—Ç—á–µ–π —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏')
        
        from db.queries.forecast import get_yesterday_outcomes
        
        df = get_yesterday_outcomes()
        
        if not df.empty:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
            df['forecast_type'] = df['feature'].map(self.feature_mapping)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É
            df['gameData'] = pd.to_datetime(df['gameData'])
            
            logger.info(f'–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∏—Å—Ö–æ–¥–æ–≤ –≤—á–µ—Ä–∞—à–Ω–∏—Ö –º–∞—Ç—á–µ–π —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏')
        else:
            logger.warning('–ò—Å—Ö–æ–¥—ã –≤—á–µ—Ä–∞—à–Ω–∏—Ö –º–∞—Ç—á–µ–π —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
        
        return df


    def group_forecasts_by_match(self, df: pd.DataFrame) -> pd.DataFrame:
        """
        –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ –º–∞—Ç—á–∞–º –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        
        Args:
            df: DataFrame —Å –∫–æ–Ω—Ñ–æ—Ä–º–Ω—ã–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
            
        Returns:
            DataFrame —Å —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
        """
        if df.empty:
            return df
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ match_id –∏ —Å–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        grouped = []
        
        for match_id, group in df.groupby('match_id'):
            match_info = {
                'match_id': match_id,
                'gameData': group['gameData'].iloc[0],
                'tournament_id': group['tournament_id'].iloc[0],
                'teamHome_id': group['teamHome_id'].iloc[0],
                'teamAway_id': group['teamAway_id'].iloc[0],
                'teamHome_name': group['teamHome_name'].iloc[0],
                'teamAway_name': group['teamAway_name'].iloc[0],
                'championshipName': group['championshipName'].iloc[0],
                'sportName': group['sportName'].iloc[0],
                'numOfHeadsHome': group['numOfHeadsHome'].iloc[0],
                'numOfHeadsAway': group['numOfHeadsAway'].iloc[0],
                'typeOutcome': group['typeOutcome'].iloc[0],
                'gameComment': group['gameComment'].iloc[0],
                'forecasts': {}
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ —Ç–∏–ø–∞–º
            for _, row in group.iterrows():
                forecast_type = row['forecast_type']
                match_info['forecasts'][forecast_type] = {
                    'forecast': row['forecast'],
                    'outcome': row['outcome'],
                    'probability': row['probability'],
                    'confidence': row['confidence'],
                    'uncertainty': row.get('uncertainty'),
                    'lower_bound': row.get('lower_bound'),
                    'upper_bound': row.get('upper_bound')
                }
            
            grouped.append(match_info)
        
        return pd.DataFrame(grouped)
    
    def generate_quality_outcomes_report(self, date: datetime) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç —Å –∏—Ç–æ–≥–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É.
        
        Args:
            date: –î–∞—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –æ—Ç—á–µ—Ç–∞
        """
        logger.info(f'–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ —Å –∏—Ç–æ–≥–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ {date.strftime("%Y-%m-%d")}')
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ö–æ–¥—ã –º–∞—Ç—á–µ–π –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
            outcomes_df = self.load_yesterday_outcomes()
            
            if outcomes_df.empty:
                logger.warning(f'–ù–µ—Ç –∏—Å—Ö–æ–¥–æ–≤ –º–∞—Ç—á–µ–π –Ω–∞ {date.strftime("%Y-%m-%d")}')
                return self._create_empty_quality_outcomes_report(date)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∫–∞—á–µ—Å—Ç–≤–∞
            quality_outcomes = self.filter_forecasts_by_criteria(
                outcomes_df, 
                min_probability=0.5,
                min_confidence=0.8,
                max_uncertainty=0.3
            )
            
            if quality_outcomes.empty:
                logger.warning(f'–ù–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å—Ö–æ–¥–æ–≤ –Ω–∞ {date.strftime("%Y-%m-%d")}')
                return self._create_no_quality_outcomes_report(date, len(outcomes_df))
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–∞—Ç—á–∞–º
            grouped_outcomes = self.group_forecasts_by_match(quality_outcomes)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report_content = self._generate_quality_outcomes_content(grouped_outcomes, date)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
            file_path = self._save_quality_outcomes_report(report_content, date)
            
            logger.info(f'–û—Ç—á–µ—Ç —Å –∏—Ç–æ–≥–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}')
            return file_path
            
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ —Å –∏—Ç–æ–≥–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {e}')
            raise

    def generate_conformal_forecast_report(self, df: pd.DataFrame) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç —Å –∫–æ–Ω—Ñ–æ—Ä–º–Ω—ã–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏.
        
        Args:
            df: DataFrame —Å –∫–æ–Ω—Ñ–æ—Ä–º–Ω—ã–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –æ—Ç—á–µ—Ç–æ–º
        """
        if df.empty:
            return "–ù–µ—Ç –∫–æ–Ω—Ñ–æ—Ä–º–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
        
        report_lines = [
            f'\n{"="*60}\n',
            f'*** –ö–û–ù–§–û–†–ú–ù–´–ï –ü–†–û–ì–ù–û–ó–´ –ù–ê –°–ï–ì–û–î–ù–Ø: {today.strftime("%Y-%m-%d")} ***',
            f'–í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: {len(df)}',
            f'{"="*60}\n'
        ]
        
        for _, match in df.iterrows():
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ
            match_info = (
                f"\nüèÜ {match['sportName']} - {match['championshipName']}\n"
                f"‚öΩ {match['teamHome_name']} vs {match['teamAway_name']}\n"
                f"üÜî ID –º–∞—Ç—á–∞: {match['match_id']}\n"
                f"üïê {match['gameData'].strftime('%H:%M')}\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–∞—Ç—á–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            game_comment = match.get('gameComment', '')
            if game_comment and str(game_comment).strip():
                comment = str(game_comment).strip()
                if len(comment) > 100:
                    comment = comment[:97] + "..."
                match_info += f"üí¨ {comment}\n"
            
            # –ü—Ä–æ–≥–Ω–æ–∑—ã
            forecasts_info = []
            for forecast_type, forecast_data in match['forecasts'].items():
                if forecast_type == 'win_draw_loss':
                    outcome_text = {
                        '–ø1': '–ü1 (–ü–æ–±–µ–¥–∞ —Ö–æ–∑—è–µ–≤)',
                        '—Ö': '–• (–ù–∏—á—å—è)',
                        '–ø2': '–ü2 (–ü–æ–±–µ–¥–∞ –≥–æ—Å—Ç–µ–π)'
                    }.get(forecast_data['outcome'], forecast_data['outcome'])
                elif forecast_type == 'oz':
                    outcome_text = '–û–ó–î' if '–¥–∞' in forecast_data['outcome'].lower() else '–û–ó–ù'
                elif forecast_type in ['goal_home', 'goal_away']:
                    outcome_text = '–ì–û–õ' if '–¥–∞' in forecast_data['outcome'].lower() else '–ù–ï–¢'
                elif forecast_type in ['total', 'total_home', 'total_away']:
                    outcome_text = '–ë–û–õ–¨–®–ï' if '–±–æ–ª—å—à–µ' in forecast_data['outcome'].lower() else '–ú–ï–ù–¨–®–ï'
                else:
                    outcome_text = forecast_data['outcome']
                
                confidence_text = f"üéØ {forecast_data['confidence']:.1%}"
                probability_text = f"üìä {forecast_data['probability']:.1%}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å –∏ –≥—Ä–∞–Ω–∏—Ü—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
                uncertainty_text = ""
                if 'uncertainty' in forecast_data and forecast_data['uncertainty'] is not None:
                    uncertainty_text = f" | üìà {forecast_data['uncertainty']:.1%}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                bounds_text = ""
                if ('lower_bound' in forecast_data and 'upper_bound' in forecast_data and 
                    forecast_data['lower_bound'] is not None and forecast_data['upper_bound'] is not None):
                    bounds_text = f" | üìè [{forecast_data['lower_bound']:.1%}-{forecast_data['upper_bound']:.1%}]"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏/—Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –¥–ª—è —Å—É–º–º —Ç–æ—Ç–∞–ª–æ–≤
                nn_value_text = ""
                if forecast_type in ['total_amount', 'total_home_amount', 'total_away_amount']:
                    try:
                        nn_value = forecast_data.get('forecast', None)
                        if nn_value is not None:
                            nn_value_text = f" | NN={float(nn_value):.2f}"
                    except Exception:
                        nn_value_text = ""
                
                forecasts_info.append(
                    f"  ‚Ä¢ {forecast_type.upper()}: {outcome_text} | {confidence_text} | {probability_text}{uncertainty_text}{bounds_text}{nn_value_text}"
                )
            
            if forecasts_info:
                match_info += '\n'.join(forecasts_info)
            
            report_lines.append(match_info)
        
        return '\n'.join(report_lines)

    def generate_yesterday_outcomes_report(self, df: pd.DataFrame) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç —Å –∏—Ç–æ–≥–∞–º–∏ –≤—á–µ—Ä–∞—à–Ω–∏—Ö –º–∞—Ç—á–µ–π.
        
        Args:
            df: DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤—á–µ—Ä–∞—à–Ω–∏—Ö –º–∞—Ç—á–µ–π
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –æ—Ç—á–µ—Ç–æ–º –ø–æ –∏—Ç–æ–≥–∞–º
        """
        if df.empty:
            return "‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—á–µ—Ä–∞—à–Ω–∏—Ö –º–∞—Ç—á–µ–π"
        
        report_lines = [
            f'\n{"="*60}\n',
            f'üìà –ò–¢–û–ì–ò –í–ß–ï–†–ê–®–ù–ò–• –ú–ê–¢–ß–ï–ô: {(datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")}',
            f'üìä –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: {len(df)}',
            f'{"="*60}\n'
        ]
        
        for _, match in df.iterrows():
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ
            match_info = [
                f"\nüèÜ {match['sportName']} - {match['championshipName']}",
                f"‚öΩ {match['teamHome_name']} vs {match['teamAway_name']}",
                f"üÜî ID –º–∞—Ç—á–∞: {match['match_id']}",
                f"üìä –°—á–µ—Ç: {match['numOfHeadsHome']}:{match['numOfHeadsAway']}",
                f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {self._get_match_result(match['numOfHeadsHome'], match['numOfHeadsAway'])}"
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–∞—Ç—á–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            game_comment = match.get('gameComment', '')
            if game_comment and str(game_comment).strip():
                comment = str(game_comment).strip()
                if len(comment) > 100:
                    comment = comment[:97] + "..."
                match_info.append(f"üí¨ {comment}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
            forecasts_info = []
            total_forecasts = 0
            correct_forecasts = 0
            
            for forecast_type, forecast_data in match['forecasts'].items():
                total_forecasts += 1
                
                # –î–æ–±–∞–≤–ª—è–µ–º forecast_type –≤ forecast_data –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                forecast_data_with_type = forecast_data.copy()
                forecast_data_with_type['forecast_type'] = forecast_type
                
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—ã–ª –ª–∏ –ø—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º
            is_correct = self.formatter.is_forecast_correct(forecast_data_with_type, match)
            if is_correct:
                correct_forecasts += 1
            
            outcome = self.formatter.format_outcome(forecast_data['outcome'], forecast_type)
            confidence = f"{forecast_data['confidence']:.1%}"
            probability = f"{forecast_data['probability']:.1%}"
            
            status_emoji = "‚úÖ" if is_correct else "‚ùå"
            
            forecasts_info.append(
                f"  {status_emoji} {forecast_type.upper()}: {outcome} | "
                f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence} | –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {probability}"
            )
            
            if forecasts_info:
                match_info.extend(forecasts_info)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–∞—Ç—á—É
                accuracy = (correct_forecasts / total_forecasts) * 100 if total_forecasts > 0 else 0
                match_info.append(f"  üìä –¢–æ—á–Ω–æ—Å—Ç—å –ø–æ –º–∞—Ç—á—É: {correct_forecasts}/{total_forecasts} ({accuracy:.1f}%)")
            
            report_lines.extend(match_info)
            report_lines.append('-' * 60)
        
        return '\n'.join(report_lines)


    def select_best_forecasts(self, forecasts_df: pd.DataFrame, max_forecasts: int = 5) -> pd.DataFrame:
        """
        –í—ã–±–∏—Ä–∞–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –∏–∑ –æ–±—â–µ–π –∫—É—á–∏.
        
        Args:
            forecasts_df: DataFrame —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
            max_forecasts: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
            
        Returns:
            DataFrame —Å –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
        """
        if forecasts_df.empty:
            return forecasts_df
        
        logger.info(f"–í—ã–±–æ—Ä {max_forecasts} –ª—É—á—à–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∏–∑ {len(forecasts_df)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
        forecasts_df = self._calculate_forecast_rating(forecasts_df)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É (—É–±—ã–≤–∞–Ω–∏–µ)
        forecasts_df = forecasts_df.sort_values('rating', ascending=False)
        
        # –ë–µ—Ä–µ–º —Ç–æ–ø N –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        best_forecasts = forecasts_df.head(max_forecasts)
        
        logger.info(f"–í—ã–±—Ä–∞–Ω–æ {len(best_forecasts)} –ª—É—á—à–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
        
        return best_forecasts

    def _calculate_forecast_rating(self, forecasts_df: pd.DataFrame) -> pd.DataFrame:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤.
        
        –†–µ–π—Ç–∏–Ω–≥ —É—á–∏—Ç—ã–≤–∞–µ—Ç:
        - –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞ (probability)
        - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ (confidence)
        - –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (uncertainty)
        - –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
        """
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        df = forecasts_df.copy()
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω 0-1
        df['prob_norm'] = df['probability'].clip(0, 1)
        df['conf_norm'] = df['confidence'].clip(0, 1)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
        if 'uncertainty' in df.columns:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å (–º–µ–Ω—å—à–µ = –ª—É—á—à–µ)
            uncertainty_max = df['uncertainty'].max()
            if uncertainty_max > 0:
                df['uncertainty_norm'] = 1 - (df['uncertainty'] / uncertainty_max)
            else:
                df['uncertainty_norm'] = 1.0
        else:
            df['uncertainty_norm'] = 1.0
        
        # –í–µ—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
        weights = {
            'probability': 0.4,    # 40% - –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞
            'confidence': 0.3,     # 30% - —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ
            'uncertainty': 0.2,    # 20% - –Ω–∏–∑–∫–∞—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å
            'diversity': 0.1       # 10% - —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ç–∏–ø–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        }
        
        # –ë–∞–∑–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        df['base_rating'] = (
            weights['probability'] * df['prob_norm'] +
            weights['confidence'] * df['conf_norm'] +
            weights['uncertainty'] * df['uncertainty_norm']
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –∑–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ç–∏–ø–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        df = self._add_diversity_bonus(df)
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
        df['rating'] = df['base_rating'] + df.get('diversity_bonus', 0)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º 0-1
        df['rating'] = df['rating'].clip(0, 1)
        
        return df

    def _add_diversity_bonus(self, df: pd.DataFrame) -> pd.DataFrame:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –±–æ–Ω—É—Å –∑–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ç–∏–ø–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤.
        –ü–æ–æ—â—Ä—è–µ—Ç –≤—ã–±–æ—Ä —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ (–∏—Å—Ö–æ–¥—ã, —Ç–æ—Ç–∞–ª—ã, –≥–æ–ª—ã –∏ —Ç.–¥.)
        """
        if 'forecast_type' not in df.columns:
            df['diversity_bonus'] = 0
            return df
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        def get_forecast_category(forecast_type: str) -> str:
            if 'win_draw_loss' in forecast_type:
                return 'outcome'
            elif 'oz' in forecast_type:
                return 'both_score'
            elif 'goal' in forecast_type:
                return 'goals'
            elif 'total' in forecast_type:
                return 'totals'
            else:
                return 'other'
        
        df['category'] = df['forecast_type'].apply(get_forecast_category)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_counts = df['category'].value_counts()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –∑–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
        # –ß–µ–º –º–µ–Ω—å—à–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ç–µ–º –±–æ–ª—å—à–µ –±–æ–Ω—É—Å
        max_count = category_counts.max()
        df['diversity_bonus'] = df['category'].apply(
            lambda cat: 0.1 * (1 - category_counts[cat] / max_count) if max_count > 0 else 0
        )
        
        return df

    def filter_forecasts_by_criteria(self, forecasts_df: pd.DataFrame, 
                                   min_probability: float = 0.6,
                                   min_confidence: float = 0.7,
                                   max_uncertainty: float = 0.3) -> pd.DataFrame:
        """
        –§–∏–ª—å—Ç—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∫–∞—á–µ—Å—Ç–≤–∞.
        
        Args:
            forecasts_df: DataFrame —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
            min_probability: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            min_confidence: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            max_uncertainty: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å
            
        Returns:
            –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π DataFrame
        """
        if forecasts_df.empty:
            return forecasts_df
        
        original_count = len(forecasts_df)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filtered_df = forecasts_df[
            (forecasts_df['probability'] >= min_probability) &
            (forecasts_df['confidence'] >= min_confidence)
        ]
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
        if 'uncertainty' in filtered_df.columns:
            # –ò—Å–∫–ª—é—á–∞–µ–º NULL –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            uncertainty_mask = filtered_df['uncertainty'].isna() | (filtered_df['uncertainty'] <= max_uncertainty)
            filtered_df = filtered_df[uncertainty_mask]
        
        filtered_count = len(filtered_df)
        
        logger.info(f"–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: {original_count} -> {filtered_count} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ "
                   f"(min_prob={min_probability}, min_conf={min_confidence})")
        
        return filtered_df

    def generate_forecast_ranking_report(self, forecasts_df: pd.DataFrame) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤.
        
        Args:
            forecasts_df: DataFrame —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –æ—Ç—á–µ—Ç–æ–º
        """
        if forecasts_df.empty:
            return "‚ùå –ù–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è"
        
        report_lines = []
        report_lines.append("üèÜ –¢–û–ü –ü–†–û–ì–ù–û–ó–û–í –ü–û –†–ï–ô–¢–ò–ù–ì–£")
        report_lines.append("=" * 50)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
        sorted_forecasts = forecasts_df.sort_values('rating', ascending=False)
        
        for idx, (_, forecast) in enumerate(sorted_forecasts.iterrows(), 1):
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ
            match_info = f"{forecast.get('teamHome_name', 'Unknown')} vs {forecast.get('teamAway_name', 'Unknown')}"
            championship = forecast.get('championshipName', 'Unknown')
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥–Ω–æ–∑–µ
            forecast_type = forecast.get('forecast_type', 'unknown')
            outcome = forecast.get('outcome', 'unknown')
            probability = forecast.get('probability', 0.0)
            confidence = forecast.get('confidence', 0.0)
            rating = forecast.get('rating', 0.0)
            uncertainty = forecast.get('uncertainty', 0.0)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥
            rating_stars = "‚≠ê" * int(rating * 5) + "‚òÜ" * (5 - int(rating * 5))
            
            report_lines.append(f"\n{idx}. {match_info}")
            report_lines.append(f"   üèÜ {championship}")
            report_lines.append(f"   üìä –ü—Ä–æ–≥–Ω–æ–∑: {outcome} | –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {probability:.1%} | –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%}")
            report_lines.append(f"   ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating:.3f} {rating_stars}")
            if uncertainty > 0:
                report_lines.append(f"   üìà –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å: {uncertainty:.3f}")
        
        report_lines.append(f"\nüìä –í—Å–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {len(forecasts_df)}")
        report_lines.append(f"üéØ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {forecasts_df['rating'].mean():.3f}")
        
        return "\n".join(report_lines)

    def _get_match_result(self, home_goals: int, away_goals: int) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—á–µ—Ç–∞.
        
        Args:
            home_goals: –ì–æ–ª—ã —Ö–æ–∑—è–µ–≤
            away_goals: –ì–æ–ª—ã –≥–æ—Å—Ç–µ–π
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: '–ü1', '–ù', '–ü2'
        """
        if home_goals is None or away_goals is None:
            return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        
        if home_goals > away_goals:
            return '–ü1'  # –ü–æ–±–µ–¥–∞ —Ö–æ–∑—è–µ–≤
        elif home_goals < away_goals:
            return '–ü2'  # –ü–æ–±–µ–¥–∞ –≥–æ—Å—Ç–µ–π
        else:
            return '–ù'   # –ù–∏—á—å—è
    
    def _generate_quality_outcomes_content(self, grouped_outcomes: pd.DataFrame, date: datetime) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∏—Ç–æ–≥–∞–º."""
        report_lines = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
        report_lines.append("=" * 80)
        report_lines.append("üèÜ –ò–¢–û–ì–ò –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–• –ü–†–û–ì–ù–û–ó–û–í")
        report_lines.append(f"üìÖ –î–∞—Ç–∞: {date.strftime('%Y-%m-%d')}")
        report_lines.append(f"‚è∞ –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {datetime.now().strftime('%H:%M:%S')}")
        report_lines.append("=" * 80)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_matches = len(grouped_outcomes)
        total_forecasts = sum(len(match['forecasts']) for _, match in grouped_outcomes.iterrows())
        
        report_lines.append(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–• –ò–¢–û–ì–û–í:")
        report_lines.append(f"   ‚Ä¢ –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: {total_matches}")
        report_lines.append(f"   ‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {total_forecasts}")
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        report_lines.append(f"\nüéØ –ö–†–ò–¢–ï–†–ò–ò –ö–ê–ß–ï–°–¢–í–ê:")
        report_lines.append(f"   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: 50%")
        report_lines.append(f"   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: 80%")
        report_lines.append(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å: 30%")
        
        if total_matches == 0:
            report_lines.append("\n‚ùå –ù–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return "\n".join(report_lines)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –º–∞—Ç—á
        report_lines.append(f"\nüèÜ –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–• –ü–†–û–ì–ù–û–ó–û–í ({total_matches} –º–∞—Ç—á–µ–π):")
        report_lines.append("-" * 80)
        
        total_correct = 0
        total_analyzed = 0
        
        for _, match in grouped_outcomes.iterrows():
            match_analysis = self._analyze_quality_match(match)
            report_lines.extend(match_analysis['lines'])
            total_correct += match_analysis['correct']
            total_analyzed += match_analysis['total']
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        accuracy = (total_correct / total_analyzed * 100) if total_analyzed > 0 else 0
        report_lines.append(f"\nüìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        report_lines.append(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–∞—Ç—á–µ–π: {total_matches}")
        report_lines.append(f"   ‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {total_analyzed}")
        report_lines.append(f"   ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {total_correct}")
        report_lines.append(f"   ‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%")
        
        return "\n".join(report_lines)
    
    def _analyze_quality_match(self, match: dict) -> dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ –º–∞—Ç—á–∞."""
        lines = []
        correct = 0
        total = 0
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ
        match_info = f"{match['teamHome_name']} vs {match['teamAway_name']}"
        championship = match['championshipName']
        sport = match['sportName']
        score = f"{match['numOfHeadsHome']}:{match['numOfHeadsAway']}"
        result = self._get_match_result(match['numOfHeadsHome'], match['numOfHeadsAway'])
        game_comment = match.get('gameComment', '')
        
        lines.append(f"\n‚öΩ {match_info}")
        lines.append(f"   üèÜ {sport} - {championship}")
        lines.append(f"   üìä –°—á–µ—Ç: {score}")
        lines.append(f"   üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–∞—Ç—á–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if game_comment and str(game_comment).strip():
            comment = str(game_comment).strip()
            if len(comment) > 100:
                comment = comment[:97] + "..."
            lines.append(f"   üí¨ {comment}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
        lines.append(f"   üìã –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ï –ü–†–û–ì–ù–û–ó–´:")
        
        for forecast_type, forecast_data in match['forecasts'].items():
            total += 1
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—ã–ª –ª–∏ –ø—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º
            is_correct = self.formatter.is_forecast_correct({
                'forecast_type': forecast_type,
                'outcome': forecast_data['outcome']
            }, match)
            
            if is_correct:
                correct += 1
                status = "‚úÖ"
            else:
                status = "‚ùå"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∏–ø –ø—Ä–æ–≥–Ω–æ–∑–∞
            type_display = self.formatter.format_forecast_type(forecast_type)
            outcome = self.formatter.format_outcome(forecast_data['outcome'], forecast_type)
            confidence = f"{forecast_data['confidence']:.1%}"
            probability = f"{forecast_data['probability']:.1%}"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏/—Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –¥–ª—è —Å—É–º–º —Ç–æ—Ç–∞–ª–æ–≤
            nn_value_text = ""
            if forecast_type in ['total_amount', 'total_home_amount', 'total_away_amount']:
                try:
                    nn_value = match['forecasts'][forecast_type].get('forecast', None)
                    if nn_value is not None:
                        nn_value_text = f" | NN={float(nn_value):.2f}"
                except Exception:
                    nn_value_text = ""
            
            lines.append(f"      {status} {type_display}: {outcome} | –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence} | –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {probability}{nn_value_text}")
        
        # –¢–æ—á–Ω–æ—Å—Ç—å –ø–æ –º–∞—Ç—á—É
        match_accuracy = (correct / total * 100) if total > 0 else 0
        lines.append(f"   üìä –¢–æ—á–Ω–æ—Å—Ç—å –ø–æ –º–∞—Ç—á—É: {correct}/{total} ({match_accuracy:.1f}%)")
        lines.append("-" * 80)
        
        return {
            'lines': lines,
            'correct': correct,
            'total': total
        }
    
    
    def _save_quality_outcomes_report(self, content: str, date: datetime) -> str:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∏—Ç–æ–≥–∞–º –≤ —Ñ–∞–π–ª."""
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–æ –≥–æ–¥—É –∏ –º–µ—Å—è—Ü—É –≤ –ø–∞–ø–∫–µ outcome
        year_month_dir = Path('results') / 'outcome' / date.strftime('%Y') / date.strftime('%m')
        year_month_dir.mkdir(parents=True, exist_ok=True)
        
        # –ò–º—è —Ñ–∞–π–ª–∞
        filename = f"{date.strftime('%Y-%m-%d')}_quality_outcome.txt"
        file_path = year_month_dir / filename
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        return str(file_path)
    
    def _create_empty_quality_outcomes_report(self, date: datetime) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∏—Å—Ö–æ–¥–æ–≤."""
        content = f"""
{'=' * 80}
üèÜ –ò–¢–û–ì–ò –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–• –ü–†–û–ì–ù–û–ó–û–í
üìÖ –î–∞—Ç–∞: {date.strftime('%Y-%m-%d')}
‚è∞ –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {datetime.now().strftime('%H:%M:%S')}
{'=' * 80}

‚ùå –ù–ï–¢ –ò–°–•–û–î–û–í –ú–ê–¢–ß–ï–ô –ù–ê –£–ö–ê–ó–ê–ù–ù–£–Æ –î–ê–¢–£

–ù–∞ {date.strftime('%Y-%m-%d')} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏—Å—Ö–æ–¥–æ–≤ –º–∞—Ç—á–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
"""
        return self._save_quality_outcomes_report(content, date)
    
    def _create_no_quality_outcomes_report(self, date: datetime, total_outcomes: int) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å—Ö–æ–¥–æ–≤."""
        content = f"""
{'=' * 80}
üèÜ –ò–¢–û–ì–ò –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–• –ü–†–û–ì–ù–û–ó–û–í
üìÖ –î–∞—Ç–∞: {date.strftime('%Y-%m-%d')}
‚è∞ –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {datetime.now().strftime('%H:%M:%S')}
{'=' * 80}

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
   ‚Ä¢ –í—Å–µ–≥–æ –∏—Å—Ö–æ–¥–æ–≤: {total_outcomes}
   ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å—Ö–æ–¥–æ–≤: 0

‚ùå –ù–ï–¢ –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–• –ò–°–•–û–î–û–í

–ò–∑ {total_outcomes} –∏—Å—Ö–æ–¥–æ–≤ –Ω–∏ –æ–¥–∏–Ω –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä–æ–≥–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∫–∞—á–µ—Å—Ç–≤–∞:
   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: 50%
   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: 80%
   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å: 30%
"""
        return self._save_quality_outcomes_report(content, date)
    
    def _generate_quality_forecast_for_today(self, df_today: pd.DataFrame) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            df_today: DataFrame —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É —Å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
        """
        from .quality_forecast_report import QualityForecastReporter
        
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        quality_reporter = QualityForecastReporter(output_dir='results')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        report_path = quality_reporter.generate_quality_forecast_report(datetime.now())
        
        return report_path
    

    def generate_forecasts(self) -> Dict[str, str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–æ—Ä–º–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –æ—Ç—á–µ—Ç–∞–º–∏: {'today': str, 'yesterday': str}
        """
        logger.info('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–æ—Ä–º–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤')
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            df_today = self.load_today_forecasts()
            today_report = ""
            
            if not df_today.empty:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ –º–∞—Ç—á–∞–º
                df_grouped = self.group_forecasts_by_match(df_today)
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                today_report = self.generate_conformal_forecast_report(df_grouped)
            else:
                logger.warning('–ù–µ—Ç –∫–æ–Ω—Ñ–æ—Ä–º–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')
                today_report = "‚ùå –ù–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Ç–æ–≥–∏ –≤—á–µ—Ä–∞—à–Ω–∏—Ö –º–∞—Ç—á–µ–π
            df_yesterday = self.load_yesterday_outcomes()
            yesterday_report = ""
            
            if not df_yesterday.empty:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–∞—Ç—á–∞–º
                df_yesterday_grouped = self.group_forecasts_by_match(df_yesterday)
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –∏—Ç–æ–≥–∞–º
                yesterday_report = self.generate_yesterday_outcomes_report(df_yesterday_grouped)
            else:
                logger.warning('–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—á–µ—Ä–∞—à–Ω–∏—Ö –º–∞—Ç—á–µ–π')
                yesterday_report = "‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—á–µ—Ä–∞—à–Ω–∏—Ö –º–∞—Ç—á–µ–π"
            
            logger.info('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–æ—Ä–º–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
            
            return {
                'today': today_report,
                'yesterday': yesterday_report
            }
            
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–æ—Ä–º–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {e}')
            raise


    def process_season_conformal_forecasts(self, year: str = None):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω—Ñ–æ—Ä–º–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞:
        - –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ–¥
        - –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π –∑–∞ —Å–µ–∑–æ–Ω
        - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–µ–Ω—å –∑–∞ –¥–Ω–µ–º
        
        Args:
            year: –ì–æ–¥ —Ç—É—Ä–Ω–∏—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2025"). –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω.
        """
        logger.info(f'–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ñ–æ—Ä–º–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞ (–≥–æ–¥: {year or "—Ç–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω"})')
        
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
            tournaments = self.get_all_tournaments(year)
            logger.info(f'–ù–∞–π–¥–µ–Ω–æ {len(tournaments)} —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
            
            # 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç—É—Ä–Ω–∏—Ä
            for tournament_id in tournaments:
                logger.info(f'–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞ {tournament_id}')
                self.process_tournament_season_forecasts(tournament_id)
            
            logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ñ–æ—Ä–º–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
            
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ñ–æ—Ä–º–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥: {e}')
            raise

    def get_all_tournaments(self, year: str = None) -> List[int]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ –≥–æ–¥—É.
        
        Args:
            year: –ì–æ–¥ —Ç—É—Ä–Ω–∏—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2025"). –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω.
        
        Returns:
            List[int]: –°–ø–∏—Å–æ–∫ ID —Ç—É—Ä–Ω–∏—Ä–æ–≤
        """
        from db.queries.forecast import get_all_tournaments
        
        return get_all_tournaments(year)

    def process_tournament_season_forecasts(self, tournament_id: int):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã –∑–∞ –≤–µ—Å—å —Å–µ–∑–æ–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞.
        
        Args:
            tournament_id: ID —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞
        """
        logger.info(f'–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–∑–æ–Ω–∞ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞ {tournament_id}')
        
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∞—Ç –º–∞—Ç—á–µ–π, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã
            match_dates = self.get_tournament_match_dates(tournament_id)
            logger.info(f'–ù–∞–π–¥–µ–Ω–æ {len(match_dates)} –¥–∞—Ç –º–∞—Ç—á–µ–π —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ –≤ —á–µ–º–ø–∏–æ–Ω–∞—Ç–µ {tournament_id}')
            
            if not match_dates:
                logger.info(f'–ù–µ—Ç –º–∞—Ç—á–µ–π —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ –≤ —á–µ–º–ø–∏–æ–Ω–∞—Ç–µ {tournament_id} - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º')
                return
            
            # 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –¥–∞—Ç—É
            for match_date in match_dates:
                logger.info(f'–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã {match_date} –¥–ª—è —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞ {tournament_id}')
                self.process_date_forecasts(tournament_id, match_date)
            
            logger.info(f'–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–∑–æ–Ω–∞ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞ {tournament_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
            
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ–∑–æ–Ω–∞ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞ {tournament_id}: {e}')

    def get_tournament_match_dates(self, tournament_id: int) -> List[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∞—Ç –º–∞—Ç—á–µ–π –≤ —á–µ–º–ø–∏–æ–Ω–∞—Ç–µ, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã.
        
        Args:
            tournament_id: ID —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞ (championship_id –∏–∑ matchs.tournament_id)
            
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        """
        from db.queries.forecast import get_tournament_match_dates
        
        return get_tournament_match_dates(tournament_id)

    def process_date_forecasts(self, tournament_id: int, match_date: str):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã –∏ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞.
        
        Args:
            tournament_id: ID —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞
            match_date: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        """
        logger.info(f'–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ {match_date} –¥–ª—è —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞ {tournament_id}')
        
        try:
            # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
            df_forecasts = self.load_date_forecasts(tournament_id, match_date)
            
            if df_forecasts.empty:
                logger.warning(f'–ù–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ {match_date} –¥–ª—è —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞ {tournament_id}')
                return
            
            logger.info(f'–ù–∞–π–¥–µ–Ω–æ {len(df_forecasts)} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ {match_date}')
            
            # 2. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ –º–∞—Ç—á–∞–º
            df_grouped = self.group_forecasts_by_match(df_forecasts)
            
            # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã
            report = self.generate_conformal_forecast_report(df_grouped)
            outcomes_report = self.generate_yesterday_outcomes_report(df_grouped)

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
            quality_path = None
            try:
                date_obj = datetime.strptime(match_date, '%Y-%m-%d')
                from .quality_forecast_report import QualityForecastReporter
                quality_reporter = QualityForecastReporter(output_dir='results')
                quality_path = quality_reporter.generate_quality_forecast_report(date_obj)
                logger.info(f"–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –∑–∞ {match_date} —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {quality_path}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –∑–∞ {match_date}: {e}")
            
            # 4. –ü—É–±–ª–∏–∫—É–µ–º –æ—Ç—á–µ—Ç
            for publisher in self.publishers:
                try:
                    if isinstance(publisher, ConformalDailyPublisher):
                        message = {
                            'date': match_date,
                            'tournament_id': tournament_id,
                            'forecasts': report,
                            'outcomes': outcomes_report,
                            'quality_path': quality_path
                        }
                        publisher.publish(message)
                    else:
                        # –û–±—ã—á–Ω—ã–π –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä
                        publisher.publish(f"–ß–µ–º–ø–∏–æ–Ω–∞—Ç {tournament_id}, {match_date}:\n{report}")
                    
                    logger.info(f'–û—Ç—á–µ—Ç –∑–∞ {match_date} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —á–µ—Ä–µ–∑ {type(publisher).__name__}')
                except Exception as e:
                    logger.error(f'–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –∑–∞ {match_date}: {e}')
            
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ {match_date}: {e}')

    def load_date_forecasts(self, tournament_id: int, match_date: str) -> pd.DataFrame:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞.
        
        Args:
            tournament_id: ID —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞ (championship_id)
            match_date: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            
        Returns:
            pd.DataFrame: –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        """
        with Session_pool() as db_session:
            # tournament_id —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è championship_id –∏–∑ matchs.tournament_id
            championship_id = tournament_id
            
            # –ü–æ–ª—É—á–∞–µ–º –≥–æ–¥ —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            tournament_year_result = db_session.execute(text("""
                SELECT yearTournament FROM tournaments WHERE championship_id = :championship_id
                ORDER BY yearTournament DESC
                LIMIT 1
            """), {'championship_id': championship_id})
            
            tournament_year_row = tournament_year_result.fetchone()
            if not tournament_year_row:
                logger.warning(f'–ù–µ –Ω–∞–π–¥–µ–Ω yearTournament –¥–ª—è championship_id {championship_id}')
                return pd.DataFrame()
            
            tournament_year = tournament_year_row[0]
            
            query = text("""
                SELECT 
                    o.id,
                    o.match_id,
                    o.feature,
                    o.forecast,
                    o.outcome,
                    o.probability,
                    o.confidence,
                    o.lower_bound,
                    o.upper_bound,
                    o.uncertainty,
                    o.created_at,
                    m.gameData,
                    m.tournament_id,
                    m.teamHome_id,
                    m.teamAway_id,
                    m.numOfHeadsHome,
                    m.numOfHeadsAway,
                    m.typeOutcome,
                    m.gameComment,
                    th.teamName as teamHome_name,
                    ta.teamName as teamAway_name,
                    ch.championshipName,
                    s.sportName
                FROM outcomes o
                JOIN matchs m ON o.match_id = m.id
                INNER JOIN predictions p ON m.id = p.match_id
                LEFT JOIN teams th ON m.teamHome_id = th.id
                LEFT JOIN teams ta ON m.teamAway_id = ta.id
                LEFT JOIN tournaments t ON m.tournament_id = t.championship_id
                LEFT JOIN championships ch ON t.championship_id = ch.id
                LEFT JOIN sports s ON ch.sport_id = s.id
                WHERE m.tournament_id = :championship_id
                AND YEAR(m.gameData) = :tournament_year
                AND DATE(m.gameData) = :match_date
                ORDER BY m.gameData, o.feature
            """)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º yearTournament –≤ —Ñ–æ—Ä–º–∞—Ç–µ XX/XX –∏–ª–∏ YYYY
            if '/' in str(tournament_year):
                # –§–æ—Ä–º–∞—Ç XX/XX - –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –∏ –¥–æ–±–∞–≤–ª—è–µ–º 2000
                year_part = str(tournament_year).split('/')[0]
                tournament_year_int = int(year_part) + 2000
                # –î–ª—è —Å–µ–∑–æ–Ω–æ–≤ —Ç–∏–ø–∞ 24/25 –∏–ª–∏ 25/26 –∏—â–µ–º –º–∞—Ç—á–∏ –≤ –æ–±–æ–∏—Ö –≥–æ–¥–∞—Ö
                next_year = tournament_year_int + 1
                year_filter = f"YEAR(m.gameData) IN ({tournament_year_int}, {next_year})"
            else:
                # –§–æ—Ä–º–∞—Ç YYYY - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
                tournament_year_int = int(tournament_year)
                year_filter = f"YEAR(m.gameData) = {tournament_year_int}"
            
            # –ó–∞–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥—É –≤ –∑–∞–ø—Ä–æ—Å–µ
            query_str = str(query)
            query_str = query_str.replace("AND YEAR(m.gameData) = :tournament_year", f"AND {year_filter}")
            
            result = db_session.execute(text(query_str), {
                'championship_id': championship_id,
                'match_date': match_date
            })
            
            df = pd.DataFrame(result.fetchall(), columns=result.keys())
            
            if not df.empty:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
                df['forecast_type'] = df['feature'].map(self.feature_mapping)
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É
                df['gameData'] = pd.to_datetime(df['gameData'])
            
            return df


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–æ—Ä–º–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
    logger.info('–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–æ—Ä–º–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤')
    
    # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    generator = ConformalForecastGenerator()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
    reports = generator.generate_forecasts()
    
    logger.info('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–æ—Ä–º–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
    return reports


if __name__ == "__main__":
    main()
