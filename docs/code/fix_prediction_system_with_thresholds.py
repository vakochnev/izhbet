#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å —É—á—ë—Ç–æ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–æ—Ä–æ–≥–æ–≤.
–û–±–Ω–æ–≤–ª—è–µ—Ç prediction_correct, actual_result, actual_value –≤ statistics_optimized.
"""

import logging
from sqlalchemy.orm import Session
from sqlalchemy import case, func
from config import Session_pool
from db.models.statistics_optimized import StatisticsOptimized
from db.models.match import Match
from core.constants import SIZE_TOTAL, SIZE_ITOTAL, SPR_SPORTS

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


def get_dynamic_thresholds(sport_id: int) -> tuple:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Ä–æ–≥–∏ (total, itotal) –¥–ª—è –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞."""
    try:
        sport_key = SPR_SPORTS.get(sport_id)
        if not sport_key:
            return 2.5, 1.5
        total = SIZE_TOTAL.get(sport_key, 2.5)
        itotal = SIZE_ITOTAL.get(sport_key, 1.5)
        return total, itotal
    except Exception:
        return 2.5, 1.5


def calculate_actual_result(match: Match, forecast_type: str) -> str:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞."""
    if not match.numOfHeadsHome or not match.numOfHeadsAway:
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    home_goals = match.numOfHeadsHome
    away_goals = match.numOfHeadsAway
    total_goals = home_goals + away_goals
    
    if forecast_type == 'win_draw_loss':
        if home_goals > away_goals:
            return "–ø1"
        elif home_goals < away_goals:
            return "–ø2"
        else:
            return "–Ω"
    
    elif forecast_type == 'oz':
        return "–æ–±–µ –∑–∞–±—å—é—Ç - –¥–∞" if home_goals > 0 and away_goals > 0 else "–æ–±–µ –∑–∞–±—å—é—Ç - –Ω–µ—Ç"
    
    elif forecast_type == 'goal_home':
        return "–≥–æ–ª —Ö–æ–∑—è–µ–≤ - –¥–∞" if home_goals > 0 else "–≥–æ–ª —Ö–æ–∑—è–µ–≤ - –Ω–µ—Ç"
    
    elif forecast_type == 'goal_away':
        return "–≥–æ–ª –≥–æ—Å—Ç–µ–π - –¥–∞" if away_goals > 0 else "–≥–æ–ª –≥–æ—Å—Ç–µ–π - –Ω–µ—Ç"
    
    elif forecast_type == 'total':
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è total
        sport_key = SPR_SPORTS.get(match.sport_id)
        threshold = SIZE_TOTAL.get(sport_key, 2.5) if sport_key else 2.5
        return f"—Ç–æ—Ç–∞–ª {threshold} - –±–æ–ª—å—à–µ" if total_goals > threshold else f"—Ç–æ—Ç–∞–ª {threshold} - –º–µ–Ω—å—à–µ"
    
    elif forecast_type == 'total_home':
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è total_home
        sport_key = SPR_SPORTS.get(match.sport_id)
        threshold = SIZE_ITOTAL.get(sport_key, 1.5) if sport_key else 1.5
        return f"—Ç–æ—Ç–∞–ª —Ö–æ–∑—è–µ–≤ {threshold} - –±–æ–ª—å—à–µ" if home_goals > threshold else f"—Ç–æ—Ç–∞–ª —Ö–æ–∑—è–µ–≤ {threshold} - –º–µ–Ω—å—à–µ"
    
    elif forecast_type == 'total_away':
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è total_away
        sport_key = SPR_SPORTS.get(match.sport_id)
        threshold = SIZE_ITOTAL.get(sport_key, 1.5) if sport_key else 1.5
        return f"—Ç–æ—Ç–∞–ª –≥–æ—Å—Ç–µ–π {threshold} - –±–æ–ª—å—à–µ" if away_goals > threshold else f"—Ç–æ—Ç–∞–ª –≥–æ—Å—Ç–µ–π {threshold} - –º–µ–Ω—å—à–µ"
    
    elif forecast_type in ['total_amount', 'total_home_amount', 'total_away_amount']:
        # –î–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if forecast_type == 'total_amount':
            return str(total_goals)
        elif forecast_type == 'total_home_amount':
            return str(home_goals)
        elif forecast_type == 'total_away_amount':
            return str(away_goals)
    
    return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"


def calculate_actual_value(match: Match, forecast_type: str) -> float:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤."""
    if not match.numOfHeadsHome or not match.numOfHeadsAway:
        return None
    
    home_goals = match.numOfHeadsHome
    away_goals = match.numOfHeadsAway
    total_goals = home_goals + away_goals
    
    if forecast_type == 'total_amount':
        return float(total_goals)
    elif forecast_type == 'total_home_amount':
        return float(home_goals)
    elif forecast_type == 'total_away_amount':
        return float(away_goals)
    
    return None


def is_prediction_correct(stat: StatisticsOptimized, match: Match, forecast_type: str, db_session: Session) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –ø—Ä–æ–≥–Ω–æ–∑, —Å —É—á—ë—Ç–æ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–æ—Ä–æ–≥–æ–≤."""
    if not match.numOfHeadsHome or not match.numOfHeadsAway:
        return False
    
    home_goals = match.numOfHeadsHome
    away_goals = match.numOfHeadsAway
    total_goals = home_goals + away_goals
    
    # –î–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if forecast_type in ['total_amount', 'total_home_amount', 'total_away_amount']:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã outcomes
        from db.models.outcome import Outcome
        outcome = db_session.query(Outcome).filter(Outcome.id == stat.outcome_id).first()
        if not outcome or outcome.forecast is None:
            return False
        
        forecast_value = float(outcome.forecast)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–æ—Ä–æ–≥–∏
        total_thresh, itotal_thresh = get_dynamic_thresholds(match.sport_id)
        
        if forecast_type == 'total_amount':
            predicted_over = forecast_value >= total_thresh
            actual_over = total_goals > total_thresh
            return predicted_over == actual_over
        
        elif forecast_type == 'total_home_amount':
            predicted_over = forecast_value >= itotal_thresh
            actual_over = home_goals > itotal_thresh
            return predicted_over == actual_over
        
        elif forecast_type == 'total_away_amount':
            predicted_over = forecast_value >= itotal_thresh
            actual_over = away_goals > itotal_thresh
            return predicted_over == actual_over
    
    # –î–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    else:
        actual_result = calculate_actual_result(match, forecast_type)
        return stat.actual_result == actual_result
    
    return False


def fix_prediction_system():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å —É—á—ë—Ç–æ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–æ—Ä–æ–≥–æ–≤."""
    print("\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Ø –° –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ú–ò –ü–û–†–û–ì–ê–ú–ò")
    print("=" * 70)
    
    with Session_pool() as db_session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = db_session.query(StatisticsOptimized).all()
        total_records = len(stats)
        
        print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {total_records:,} –∑–∞–ø–∏—Å–µ–π...")
        
        updated_count = 0
        correct_count = 0
        
        for i, stat in enumerate(stats):
            if i % 1000 == 0:
                print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i:,}/{total_records:,} –∑–∞–ø–∏—Å–µ–π...")
            
            # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á
            match = db_session.query(Match).filter(Match.id == stat.match_id).first()
            if not match:
                continue
            
            # –û–±–Ω–æ–≤–ª—è–µ–º actual_result –∏ actual_value
            new_actual_result = calculate_actual_result(match, stat.forecast_type)
            new_actual_value = calculate_actual_value(match, stat.forecast_type)
            
            stat.actual_result = new_actual_result
            stat.actual_value = new_actual_value
            
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º prediction_correct —Å —É—á—ë—Ç–æ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–æ—Ä–æ–≥–æ–≤
            is_correct = is_prediction_correct(stat, match, stat.forecast_type, db_session)
            stat.prediction_correct = is_correct
            
            if is_correct:
                correct_count += 1
            
            updated_count += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db_session.commit()
        
        print(f"\n‚úÖ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {updated_count:,}")
        print(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {correct_count:,}")
        print(f"–û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {correct_count / updated_count * 100:.2f}%" if updated_count > 0 else "–û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: 0.00%")


if __name__ == "__main__":
    fix_prediction_system()
