#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ç–∞—Ä—ã—Ö –∏ –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π.
"""

import logging
import os
import pandas as pd
import numpy as np
from typing import Dict, Any, List, Optional, Tuple
import joblib
from datetime import datetime, timedelta
from tqdm import tqdm

import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config import Session_pool
from db.models import Feature, Match, Outcome
from core.constants import TARGET_FIELDS, DROP_FIELD_EMBEDDING

logging.basicConfig(level=logging.INFO, format='%(message)s')
logger = logging.getLogger(__name__)

META = {'id', 'match_id', 'prefix', 'created_at', 'updated_at'}


class HistoricalTester:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –∏ –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö."""
    
    def __init__(self, models_dir: str = 'results/quality/improved_models'):
        self.models_dir = models_dir
        self.models = {}
        self.scalers = {}
        self.feature_names = {}
        self.load_models()
    
    def load_models(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏."""
        logger.info('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...')
        
        targets = ['wdl', 'oz', 'total_amount']
        
        for target in targets:
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏
                rf_path = os.path.join(self.models_dir, f'{target}_rf_model.joblib')
                gb_path = os.path.join(self.models_dir, f'{target}_gb_model.joblib')
                scaler_path = os.path.join(self.models_dir, f'{target}_scaler.joblib')
                metadata_path = os.path.join(self.models_dir, f'{target}_metadata.joblib')
                
                if all(os.path.exists(p) for p in [rf_path, gb_path, scaler_path, metadata_path]):
                    self.models[target] = {
                        'rf': joblib.load(rf_path),
                        'gb': joblib.load(gb_path)
                    }
                    self.scalers[target] = joblib.load(scaler_path)
                    metadata = joblib.load(metadata_path)
                    self.feature_names[target] = metadata['feature_names']
                    logger.info(f'‚úÖ {target}: –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
                else:
                    logger.warning(f'‚ùå {target}: –Ω–µ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã')
                    
            except Exception as e:
                logger.error(f'‚ùå {target}: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ - {e}')
    
    def prepare_features(self, match_id: int) -> Dict[str, pd.DataFrame]:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–∏—á–∏ –¥–ª—è –º–∞—Ç—á–∞."""
        with Session_pool() as db:
            rows = (
                db.query(Feature)
                .filter(Feature.match_id == match_id)
                .all()
            )
        
        if not rows:
            return {}
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        record = {'match_id': match_id}
        for r in rows:
            d = r.as_dict()
            pref = d['prefix']
            
            for k, v in d.items():
                if k in META or k in DROP_FIELD_EMBEDDING or k.startswith('_'):
                    continue
                if k in TARGET_FIELDS:
                    continue
                record[f'{pref}_{k}'] = v
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame([record])
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ü–µ–ª–∏
        prepared_features = {}
        for target, feature_list in self.feature_names.items():
            available_features = [f for f in feature_list if f in df.columns]
            if available_features:
                X = df[available_features].copy()
                # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —á–∏—Å–ª–æ–≤—ã–º —Ç–∏–ø–∞–º
                for col in X.columns:
                    X[col] = pd.to_numeric(X[col], errors='coerce')
                X = X.fillna(0.0).astype(float)
                prepared_features[target] = X
            else:
                logger.warning(f'‚ö†Ô∏è {target}: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏—á–µ–π')
        
        return prepared_features
    
    def predict_match(self, match_id: int) -> Dict[str, Any]:
        """–î–µ–ª–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –º–∞—Ç—á–∞."""
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏—á–∏
        features = self.prepare_features(match_id)
        
        if not features:
            return {'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞—Ç—á–∞'}
        
        predictions = {}
        
        for target, X in features.items():
            if target not in self.models:
                continue
            
            try:
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ñ–∏—á–∏
                X_scaled = self.scalers[target].transform(X)
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –æ—Ç –æ–±–µ–∏—Ö –º–æ–¥–µ–ª–µ–π
                rf_pred = self.models[target]['rf'].predict(X_scaled)[0]
                gb_pred = self.models[target]['gb'].predict(X_scaled)[0]
                
                # –ê–Ω—Å–∞–º–±–ª—å
                if target in ['wdl', 'oz']:
                    # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è - –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
                    ensemble_pred = int(np.round((rf_pred + gb_pred) / 2))
                else:
                    # –†–µ–≥—Ä–µ—Å—Å–∏—è - —Å—Ä–µ–¥–Ω–µ–µ
                    ensemble_pred = (rf_pred + gb_pred) / 2
                
                predictions[target] = {
                    'rf_prediction': rf_pred,
                    'gb_prediction': gb_pred,
                    'ensemble_prediction': ensemble_pred
                }
                
            except Exception as e:
                logger.error(f"‚ùå {target}: –æ—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è - {e}")
                predictions[target] = {'error': str(e)}
        
        return predictions
    
    def get_historical_matches(self, limit: int = 1000) -> List[Tuple[int, Match]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –º–∞—Ç—á–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏."""
        with Session_pool() as db:
            query = db.query(Match).filter(
                Match.numOfHeadsHome.isnot(None),
                Match.numOfHeadsAway.isnot(None),
                Match.gameData < datetime.now() - timedelta(days=1)  # –¢–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∞—Ç—á–∏
            ).order_by(Match.gameData.desc()).limit(limit)
            
            matches = query.all()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –º–∞—Ç—á–∏ —Å —Ñ–∏—á–∞–º–∏
            matches_with_features = []
            for match in matches:
                features_count = db.query(Feature).filter(Feature.match_id == match.id).count()
                if features_count > 0:
                    matches_with_features.append((match.id, match))
            
            logger.info(f'–ù–∞–π–¥–µ–Ω–æ {len(matches_with_features)} –º–∞—Ç—á–µ–π —Å —Ñ–∏—á–∞–º–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏')
            return matches_with_features
    
    def test_historical_accuracy(self, limit: int = 1000) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö."""
        logger.info(f'\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ê –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–•')
        logger.info('=' * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –º–∞—Ç—á–∏
        historical_matches = self.get_historical_matches(limit)
        
        if not historical_matches:
            return {'error': '–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –º–∞—Ç—á–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'}
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        results = {
            'total_matches': len(historical_matches),
            'wdl': {'correct': 0, 'total': 0, 'predictions': []},
            'oz': {'correct': 0, 'total': 0, 'predictions': []},
            'total_amount': {'correct': 0, 'total': 0, 'predictions': []}
        }
        
        logger.info(f'–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ {len(historical_matches)} –º–∞—Ç—á–∞—Ö...')
        
        for match_id, match in tqdm(historical_matches, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç—á–µ–π"):
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑
                predictions = self.predict_match(match_id)
                
                if 'error' in predictions:
                    continue
                
                home_goals = match.numOfHeadsHome
                away_goals = match.numOfHeadsAway
                total_goals = home_goals + away_goals
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º WDL
                if 'wdl' in predictions and 'error' not in predictions['wdl']:
                    wdl_pred = predictions['wdl']['ensemble_prediction']
                    wdl_actual = 0 if home_goals > away_goals else (1 if home_goals == away_goals else 2)
                    
                    is_correct = wdl_pred == wdl_actual
                    results['wdl']['total'] += 1
                    if is_correct:
                        results['wdl']['correct'] += 1
                    
                    results['wdl']['predictions'].append({
                        'match_id': match_id,
                        'predicted': wdl_pred,
                        'actual': wdl_actual,
                        'correct': is_correct,
                        'score': f'{home_goals}:{away_goals}'
                    })
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º OZ
                if 'oz' in predictions and 'error' not in predictions['oz']:
                    oz_pred = predictions['oz']['ensemble_prediction']
                    oz_actual = 1 if home_goals > 0 and away_goals > 0 else 0
                    
                    is_correct = oz_pred == oz_actual
                    results['oz']['total'] += 1
                    if is_correct:
                        results['oz']['correct'] += 1
                    
                    results['oz']['predictions'].append({
                        'match_id': match_id,
                        'predicted': oz_pred,
                        'actual': oz_actual,
                        'correct': is_correct,
                        'score': f'{home_goals}:{away_goals}'
                    })
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º Total Amount
                if 'total_amount' in predictions and 'error' not in predictions['total_amount']:
                    total_pred = predictions['total_amount']['ensemble_prediction']
                    
                    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø–æ—Ä–æ–≥–æ–º 2.5
                    pred_over = total_pred >= 2.5
                    actual_over = total_goals > 2.5
                    
                    is_correct = pred_over == actual_over
                    results['total_amount']['total'] += 1
                    if is_correct:
                        results['total_amount']['correct'] += 1
                    
                    results['total_amount']['predictions'].append({
                        'match_id': match_id,
                        'predicted': total_pred,
                        'actual': total_goals,
                        'predicted_over': pred_over,
                        'actual_over': actual_over,
                        'correct': is_correct,
                        'score': f'{home_goals}:{away_goals}'
                    })
                
            except Exception as e:
                logger.error(f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Ç—á–∞ {match_id}: {e}')
                continue
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å
        for target in ['wdl', 'oz', 'total_amount']:
            if results[target]['total'] > 0:
                accuracy = results[target]['correct'] / results[target]['total']
                results[target]['accuracy'] = accuracy
            else:
                results[target]['accuracy'] = 0.0
        
        return results
    
    def compare_with_existing_predictions(self, limit: int = 1000) -> Dict[str, Any]:
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ –≤ outcomes."""
        logger.info(f'\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –° –°–£–©–ï–°–¢–í–£–Æ–©–ò–ú–ò –ü–†–û–ì–ù–û–ó–ê–ú–ò')
        logger.info('=' * 60)
        
        with Session_pool() as db:
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            query = db.query(Outcome, Match).join(Match, Outcome.match_id == Match.id).filter(
                Match.numOfHeadsHome.isnot(None),
                Match.numOfHeadsAway.isnot(None),
                Match.gameData < datetime.now() - timedelta(days=1)
            ).limit(limit)
            
            existing_predictions = query.all()
            
            if not existing_predictions:
                return {'error': '–ù–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è'}
            
            logger.info(f'–ù–∞–π–¥–µ–Ω–æ {len(existing_predictions)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤')
            
            comparison_results = {
                'total_predictions': len(existing_predictions),
                'by_feature': {}
            }
            
            for outcome, match in existing_predictions:
                feature_code = outcome.feature
                
                if feature_code not in comparison_results['by_feature']:
                    comparison_results['by_feature'][feature_code] = {
                        'correct': 0,
                        'total': 0,
                        'predictions': []
                    }
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞
                is_correct = self._evaluate_existing_prediction(outcome, match)
                
                comparison_results['by_feature'][feature_code]['total'] += 1
                if is_correct:
                    comparison_results['by_feature'][feature_code]['correct'] += 1
                
                comparison_results['by_feature'][feature_code]['predictions'].append({
                    'match_id': match.id,
                    'outcome': outcome.outcome,
                    'forecast': outcome.forecast,
                    'correct': is_correct,
                    'score': f'{match.numOfHeadsHome}:{match.numOfHeadsAway}'
                })
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å
            for feature_code, data in comparison_results['by_feature'].items():
                if data['total'] > 0:
                    data['accuracy'] = data['correct'] / data['total']
                else:
                    data['accuracy'] = 0.0
            
            return comparison_results
    
    def _evaluate_existing_prediction(self, outcome: Outcome, match: Match) -> bool:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞."""
        home_goals = match.numOfHeadsHome
        away_goals = match.numOfHeadsAway
        total_goals = home_goals + away_goals
        
        feature_code = outcome.feature
        
        if feature_code == 1:  # win_draw_loss
            actual = '–ø1' if home_goals > away_goals else ('–Ω' if home_goals == away_goals else '–ø2')
            return outcome.outcome == actual
        
        elif feature_code == 2:  # oz
            actual = '–æ–±–µ –∑–∞–±—å—é—Ç - –¥–∞' if home_goals > 0 and away_goals > 0 else '–æ–±–µ –∑–∞–±—å—é—Ç - –Ω–µ—Ç'
            return outcome.outcome == actual
        
        elif feature_code == 8:  # total_amount
            pred_over = outcome.outcome == '–¢–ë'
            actual_over = total_goals > 2.5
            return pred_over == actual_over
        
        return False
    
    def generate_report(self, results: Dict[str, Any], comparison_results: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏."""
        report = []
        report.append("=" * 80)
        report.append("–û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –£–õ–£–ß–®–ï–ù–ù–´–• –ú–û–î–ï–õ–ï–ô")
        report.append("=" * 80)
        report.append("")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π
        report.append("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ù–û–í–´–• –ú–û–î–ï–õ–ï–ô:")
        report.append("-" * 40)
        
        if 'error' not in results:
            report.append(f"–í—Å–µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –º–∞—Ç—á–µ–π: {results['total_matches']}")
            report.append("")
            
            for target in ['wdl', 'oz', 'total_amount']:
                data = results[target]
                if data['total'] > 0:
                    accuracy = data['accuracy'] * 100
                    report.append(f"{target.upper()}:")
                    report.append(f"  –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.2f}% ({data['correct']}/{data['total']})")
                    report.append("")
        else:
            report.append(f"–û—à–∏–±–∫–∞: {results['error']}")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
        report.append("üìà –°–†–ê–í–ù–ï–ù–ò–ï –° –°–£–©–ï–°–¢–í–£–Æ–©–ò–ú–ò –ü–†–û–ì–ù–û–ó–ê–ú–ò:")
        report.append("-" * 40)
        
        if 'error' not in comparison_results:
            report.append(f"–í—Å–µ–≥–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {comparison_results['total_predictions']}")
            report.append("")
            
            feature_names = {1: 'WDL', 2: 'OZ', 8: 'Total Amount'}
            
            for feature_code, data in comparison_results['by_feature'].items():
                if data['total'] > 0:
                    accuracy = data['accuracy'] * 100
                    feature_name = feature_names.get(feature_code, f'Feature {feature_code}')
                    report.append(f"{feature_name}:")
                    report.append(f"  –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.2f}% ({data['correct']}/{data['total']})")
                    report.append("")
        else:
            report.append(f"–û—à–∏–±–∫–∞: {comparison_results['error']}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        report.append("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        report.append("-" * 40)
        
        if 'error' not in results and 'error' not in comparison_results:
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å
            new_wdl_acc = results['wdl']['accuracy'] if results['wdl']['total'] > 0 else 0
            new_oz_acc = results['oz']['accuracy'] if results['oz']['total'] > 0 else 0
            new_total_acc = results['total_amount']['accuracy'] if results['total_amount']['total'] > 0 else 0
            
            old_wdl_acc = comparison_results['by_feature'].get(1, {}).get('accuracy', 0)
            old_oz_acc = comparison_results['by_feature'].get(2, {}).get('accuracy', 0)
            old_total_acc = comparison_results['by_feature'].get(8, {}).get('accuracy', 0)
            
            improvements = []
            
            if new_wdl_acc > old_wdl_acc:
                improvement = (new_wdl_acc - old_wdl_acc) * 100
                improvements.append(f"WDL: +{improvement:.2f}%")
            
            if new_oz_acc > old_oz_acc:
                improvement = (new_oz_acc - old_oz_acc) * 100
                improvements.append(f"OZ: +{improvement:.2f}%")
            
            if new_total_acc > old_total_acc:
                improvement = (new_total_acc - old_total_acc) * 100
                improvements.append(f"Total Amount: +{improvement:.2f}%")
            
            if improvements:
                report.append("‚úÖ –£–ª—É—á—à–µ–Ω–∏—è:")
                for imp in improvements:
                    report.append(f"  - {imp}")
            else:
                report.append("‚ö†Ô∏è –£–ª—É—á—à–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            
            # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
            avg_new_acc = (new_wdl_acc + new_oz_acc + new_total_acc) / 3
            avg_old_acc = (old_wdl_acc + old_oz_acc + old_total_acc) / 3
            
            if avg_new_acc > avg_old_acc:
                overall_improvement = (avg_new_acc - avg_old_acc) * 100
                report.append(f"\nüéØ –û–±—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ: +{overall_improvement:.2f}%")
                report.append("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –º–æ–¥–µ–ª–∏")
            else:
                report.append("\n‚ö†Ô∏è –ù–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ –ø–æ–∫–∞–∑–∞–ª–∏ —É–ª—É—á—à–µ–Ω–∏—è")
                report.append("üîç –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
        
        report.append("")
        report.append("=" * 80)
        report.append(f"–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        report.append("=" * 80)
        
        return "\n".join(report)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    tester = HistoricalTester()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –º–æ–¥–µ–ª–∏
    logger.info("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...")
    results = tester.test_historical_accuracy(limit=500)
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
    comparison_results = tester.compare_with_existing_predictions(limit=500)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = tester.generate_report(results, comparison_results)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report_file = f'results/quality/historical_test_report_{datetime.now().strftime("%Y%m%d_%H%M%S")}.txt'
    os.makedirs(os.path.dirname(report_file), exist_ok=True)
    
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write(report)
    
    logger.info(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
    print("\n" + report)


if __name__ == '__main__':
    main()
