#!/usr/bin/env python3
import logging
import os
import pandas as pd
import glob
from typing import Dict, List, Set

logging.basicConfig(level=logging.INFO, format='%(message)s')
logger = logging.getLogger(__name__)


def load_importance_data() -> Dict[str, pd.DataFrame]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Ñ–∏—á–µ–π –∏–∑ CSV —Ñ–∞–π–ª–æ–≤."""
    out_dir = os.path.join('results', 'quality', 'feature_importance')
    
    targets = ['win_draw_loss', 'oz', 'total_amount', 'total_home_amount', 'total_away_amount']
    importance_data = {}
    
    for target in targets:
        csv_pattern = os.path.join(out_dir, f'{target}_*.csv')
        files = glob.glob(csv_pattern)
        if files:
            latest_file = max(files, key=os.path.getctime)
            df = pd.read_csv(latest_file)
            df = df.sort_values('MI', ascending=False)
            importance_data[target] = df
            print(f"‚úÖ {target}: {len(df)} —Ñ–∏—á–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
        else:
            print(f"‚ùå {target}: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return importance_data


def select_top_features(importance_data: Dict[str, pd.DataFrame], 
                       top_n: int = 500, 
                       mi_threshold: float = 0.001) -> Dict[str, Set[str]]:
    """–í—ã–±–∏—Ä–∞–µ—Ç —Ç–æ–ø-N —Ñ–∏—á–µ–π –¥–ª—è –∫–∞–∂–¥–æ–π —Ü–µ–ª–∏."""
    top_features = {}
    
    for target, df in importance_data.items():
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ—Ä–æ–≥—É MI
        filtered_df = df[df['MI'] >= mi_threshold]
        
        # –ë–µ—Ä–µ–º —Ç–æ–ø-N
        top_df = filtered_df.head(top_n)
        
        # –°–æ–±–∏—Ä–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏—á–µ–π
        feature_names = set(top_df['feature'].tolist())
        top_features[target] = feature_names
        
        print(f"üìä {target}: {len(feature_names)} —Ñ–∏—á–µ–π (MI >= {mi_threshold})")
    
    return top_features


def find_common_features(top_features: Dict[str, Set[str]]) -> Set[str]:
    """–ù–∞—Ö–æ–¥–∏—Ç —Ñ–∏—á–∏, –≤–∞–∂–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Ü–µ–ª–µ–π."""
    if not top_features:
        return set()
    
    # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–Ω–æ–∂–µ—Å—Ç–≤
    common = set.intersection(*top_features.values())
    print(f"\nüîó –û–±—â–∏–µ –≤–∞–∂–Ω—ã–µ —Ñ–∏—á–∏: {len(common)}")
    
    return common


def find_target_specific_features(top_features: Dict[str, Set[str]]) -> Dict[str, Set[str]]:
    """–ù–∞—Ö–æ–¥–∏—Ç —Ñ–∏—á–∏, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π —Ü–µ–ª–∏."""
    specific_features = {}
    
    for target, features in top_features.items():
        # –§–∏—á–∏ —ç—Ç–æ–π —Ü–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –≤–∞–∂–Ω—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö
        other_features = set()
        for other_target, other_feat in top_features.items():
            if other_target != target:
                other_features.update(other_feat)
        
        specific = features - other_features
        specific_features[target] = specific
        print(f"üéØ {target} —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ: {len(specific)} —Ñ–∏—á–µ–π")
    
    return specific_features


def export_selected_features(top_features: Dict[str, Set[str]], 
                           common_features: Set[str],
                           specific_features: Dict[str, Set[str]]) -> str:
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏—á–∏ –≤ —Ñ–∞–π–ª."""
    out_dir = os.path.join('results', 'quality', 'feature_selection')
    os.makedirs(out_dir, exist_ok=True)
    
    out_path = os.path.join(out_dir, 'selected_features.txt')
    
    with open(out_path, 'w', encoding='utf-8') as f:
        f.write("–û–¢–û–ë–†–ê–ù–ù–´–ï –§–ò–ß–ò –î–õ–Ø –£–õ–£–ß–®–ï–ù–ò–Ø –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Ø\n")
        f.write("=" * 60 + "\n\n")
        
        f.write(f"–û–ë–©–ò–ï –í–ê–ñ–ù–´–ï –§–ò–ß–ò ({len(common_features)}):\n")
        f.write("-" * 40 + "\n")
        for feat in sorted(common_features):
            f.write(f"  {feat}\n")
        f.write("\n")
        
        for target, features in top_features.items():
            f.write(f"–¢–û–ü –§–ò–ß–ò –î–õ–Ø {target.upper()} ({len(features)}):\n")
            f.write("-" * 40 + "\n")
            for feat in sorted(features):
                f.write(f"  {feat}\n")
            f.write("\n")
        
        f.write("–°–ü–ï–¶–ò–§–ò–ß–ù–´–ï –§–ò–ß–ò –ü–û –¶–ï–õ–Ø–ú:\n")
        f.write("-" * 40 + "\n")
        for target, features in specific_features.items():
            f.write(f"{target.upper()} ({len(features)}):\n")
            for feat in sorted(features):
                f.write(f"  {feat}\n")
            f.write("\n")
    
    return out_path


def main():
    print("\nüîç –û–¢–ë–û–† –í–ê–ñ–ù–´–• –§–ò–ß–ï–ô")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–∂–Ω–æ—Å—Ç–∏
    importance_data = load_importance_data()
    if not importance_data:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Ñ–∏—á–µ–π")
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø —Ñ–∏—á–∏
    top_features = select_top_features(importance_data, top_n=500, mi_threshold=0.001)
    
    # –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–µ –∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ–∏—á–∏
    common_features = find_common_features(top_features)
    specific_features = find_target_specific_features(top_features)
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    out_path = export_selected_features(top_features, common_features, specific_features)
    print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {out_path}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"–û–±—â–∏—Ö –≤–∞–∂–Ω—ã—Ö —Ñ–∏—á–µ–π: {len(common_features)}")
    total_unique = len(set.union(*top_features.values()))
    print(f"–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∞–∂–Ω—ã—Ö —Ñ–∏—á–µ–π: {total_unique}")
    
    for target, features in top_features.items():
        print(f"{target}: {len(features)} —Ñ–∏—á–µ–π")


if __name__ == '__main__':
    main()
