#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤ publisher.py.
–î–æ–±–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤.
"""

import logging
import os
import sys
from datetime import datetime
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ publisher –¥–ª—è monitor_prediction_quality
publisher_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'publisher')
if publisher_path not in sys.path:
    sys.path.insert(0, publisher_path)

from monitor_prediction_quality import PredictionQualityMonitor

logging.basicConfig(level=logging.INFO, format='%(message)s')
logger = logging.getLogger(__name__)


class PublisherQualityMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ publisher.py."""
    
    def __init__(self):
        self.monitor = PredictionQualityMonitor()
    
    def check_quality_after_prediction(self, hours: int = 24) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤."""
        logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏')
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã
            predictions = self.monitor.get_recent_predictions(hours)
            
            if not predictions:
                logger.warning('–ù–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞')
                return {'status': 'no_data', 'message': '–ù–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'}
            
            # –û—Ü–µ–Ω–∏–≤–∞–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å
            accuracy_results = self.monitor.evaluate_prediction_accuracy(predictions)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã
            alerts = self.monitor.check_quality_alerts(accuracy_results)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            overall_accuracy = accuracy_results.get('overall_accuracy', 0.0)
            
            if overall_accuracy < 0.3:
                status = 'critical'
                message = f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {overall_accuracy:.2%}'
            elif overall_accuracy < 0.5:
                status = 'warning'
                message = f'–ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {overall_accuracy:.2%}'
            elif overall_accuracy < 0.7:
                status = 'acceptable'
                message = f'–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {overall_accuracy:.2%}'
            else:
                status = 'good'
                message = f'–•–æ—Ä–æ—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {overall_accuracy:.2%}'
            
            result = {
                'status': status,
                'message': message,
                'overall_accuracy': overall_accuracy,
                'total_predictions': accuracy_results.get('total_predictions', 0),
                'alerts_count': len(alerts),
                'alerts': alerts,
                'by_feature': accuracy_results.get('by_feature', {})
            }
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            logger.info(f'üìä –ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {message}')
            logger.info(f'  –í—Å–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {result["total_predictions"]}')
            logger.info(f'  –ê–ª–µ—Ä—Ç–æ–≤: {result["alerts_count"]}')
            
            if alerts:
                logger.warning('üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∞–ª–µ—Ä—Ç—ã:')
                for alert in alerts[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∞–ª–µ—Ä—Ç–∞
                    logger.warning(f'  - {alert["message"]}')
            
            return result
            
        except Exception as e:
            logger.error(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞: {e}')
            return {'status': 'error', 'message': str(e)}
    
    def generate_quality_summary(self, quality_result: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ –∫–∞—á–µ—Å—Ç–≤—É."""
        if quality_result['status'] == 'no_data':
            return "üìä –ö–∞—á–µ—Å—Ç–≤–æ: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        
        if quality_result['status'] == 'error':
            return f"‚ùå –ö–∞—á–µ—Å—Ç–≤–æ: –û—à–∏–±–∫–∞ - {quality_result['message']}"
        
        status_emoji = {
            'critical': 'üî¥',
            'warning': 'üü°',
            'acceptable': 'üü¢',
            'good': 'üü¢'
        }
        
        emoji = status_emoji.get(quality_result['status'], '‚ùì')
        accuracy = quality_result['overall_accuracy']
        total = quality_result['total_predictions']
        alerts = quality_result['alerts_count']
        
        summary = f"{emoji} –ö–∞—á–µ—Å—Ç–≤–æ: {quality_result['message']} ({total} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤, {alerts} –∞–ª–µ—Ä—Ç–æ–≤)"
        
        return summary


def check_prediction_quality(hours: int = 24) -> Dict[str, Any]:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ publisher.py."""
    monitor = PublisherQualityMonitor()
    return monitor.check_quality_after_prediction(hours)


def get_quality_summary(hours: int = 24) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –¥–ª—è publisher.py."""
    monitor = PublisherQualityMonitor()
    quality_result = monitor.check_quality_after_prediction(hours)
    return monitor.generate_quality_summary(quality_result)


if __name__ == '__main__':
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è publisher.py")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
    quality_result = check_prediction_quality(hours=24*7)  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    summary = get_quality_summary(hours=24*7)
    print(f"\n{summary}")
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if quality_result['status'] != 'no_data' and quality_result['status'] != 'error':
        print(f"\nüìä –î–µ—Ç–∞–ª–∏:")
        print(f"  –°—Ç–∞—Ç—É—Å: {quality_result['status']}")
        print(f"  –¢–æ—á–Ω–æ—Å—Ç—å: {quality_result['overall_accuracy']:.2%}")
        print(f"  –ü—Ä–æ–≥–Ω–æ–∑–æ–≤: {quality_result['total_predictions']}")
        print(f"  –ê–ª–µ—Ä—Ç–æ–≤: {quality_result['alerts_count']}")
        
        if quality_result['alerts']:
            print(f"\nüö® –ê–ª–µ—Ä—Ç—ã:")
            for alert in quality_result['alerts'][:3]:
                print(f"  - {alert['message']}")
