#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö —Ñ–∏—á–µ–π –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –Ω–æ–≤—ã—Ö.
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏—á–µ–π –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è.
"""

import logging
import os
import pandas as pd
import numpy as np
from typing import Dict, Any, List, Optional, Tuple
from datetime import datetime, timedelta
import json

import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sqlalchemy import text
from config import Session_pool
from db.models import Feature, Match, Outcome
from core.constants import TARGET_FIELDS, DROP_FIELD_EMBEDDING

logging.basicConfig(level=logging.INFO, format='%(message)s')
logger = logging.getLogger(__name__)

META = {'id', 'match_id', 'prefix', 'created_at', 'updated_at'}


class FeatureAnalysis:
    """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö —Ñ–∏—á–µ–π –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é."""
    
    def __init__(self, output_dir: str = 'results/feature_analysis'):
        self.output_dir = output_dir
        os.makedirs(output_dir, exist_ok=True)
    
    def analyze_current_features(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ñ–∏—á–∏."""
        logger.info('üîç –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö —Ñ–∏—á–µ–π')
        
        with Session_pool() as db:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ñ–∏—á–∞–º
            feature_stats = db.execute(text("""
                SELECT 
                    prefix,
                    COUNT(*) as total_records,
                    COUNT(DISTINCT match_id) as unique_matches,
                    AVG(CASE WHEN target_win_draw_loss IS NOT NULL THEN 1 ELSE 0 END) as wdl_coverage,
                    AVG(CASE WHEN target_oz IS NOT NULL THEN 1 ELSE 0 END) as oz_coverage,
                    AVG(CASE WHEN target_total_amount IS NOT NULL THEN 1 ELSE 0 END) as total_coverage
                FROM features 
                GROUP BY prefix
                ORDER BY prefix
            """)).fetchall()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö
            columns_info = db.execute(text("""
                SELECT COLUMN_NAME, DATA_TYPE, IS_NULLABLE
                FROM INFORMATION_SCHEMA.COLUMNS 
                WHERE TABLE_NAME = 'features' 
                AND TABLE_SCHEMA = DATABASE()
                ORDER BY ORDINAL_POSITION
            """)).fetchall()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ —Ñ–∏—á–µ–π
            feature_coverage = self._analyze_feature_coverage(db)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
            correlations = self._analyze_correlations(db)
            
            results = {
                'feature_stats': [dict(row._mapping) for row in feature_stats],
                'columns_info': [dict(row._mapping) for row in columns_info],
                'feature_coverage': feature_coverage,
                'correlations': correlations,
                'analysis_timestamp': datetime.now().isoformat()
            }
            
            return results
    
    def _analyze_feature_coverage(self, db) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏–µ —Ñ–∏—á–µ–π."""
        logger.info('üìä –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è —Ñ–∏—á–µ–π')
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º —Ñ–∏—á–µ–π
        coverage_stats = db.execute(text("""
            SELECT 
                prefix,
                COUNT(*) as total_features,
                SUM(CASE WHEN COLUMN_NAME LIKE 'general_%' THEN 1 ELSE 0 END) as general_features,
                SUM(CASE WHEN COLUMN_NAME LIKE 'home_%' THEN 1 ELSE 0 END) as home_features,
                SUM(CASE WHEN COLUMN_NAME LIKE 'away_%' THEN 1 ELSE 0 END) as away_features,
                SUM(CASE WHEN COLUMN_NAME LIKE 'strong_%' THEN 1 ELSE 0 END) as strong_features,
                SUM(CASE WHEN COLUMN_NAME LIKE 'medium_%' THEN 1 ELSE 0 END) as medium_features,
                SUM(CASE WHEN COLUMN_NAME LIKE 'weak_%' THEN 1 ELSE 0 END) as weak_features
            FROM (
                SELECT DISTINCT prefix, COLUMN_NAME
                FROM features f
                JOIN INFORMATION_SCHEMA.COLUMNS c ON c.TABLE_NAME = 'features'
                WHERE c.COLUMN_NAME NOT IN ('id', 'match_id', 'prefix', 'created_at', 'updated_at')
                AND c.COLUMN_NAME NOT LIKE 'target_%'
            ) feature_types
            GROUP BY prefix
        """)).fetchall()
        
        return [dict(row._mapping) for row in coverage_stats]
    
    def _analyze_correlations(self, db) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É —Ñ–∏—á–∞–º–∏ –∏ —Ç–∞—Ä–≥–µ—Ç–∞–º–∏."""
        logger.info('üîó –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π')
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±–æ—Ä–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
        sample_data = db.execute(text("""
            SELECT 
                f.match_id,
                f.prefix,
                f.target_win_draw_loss,
                f.target_oz,
                f.target_total_amount,
                m.numOfHeadsHome,
                m.numOfHeadsAway,
                m.sport_id,
                m.tournament_id
            FROM features f
            JOIN matchs m ON f.match_id = m.id
            WHERE f.prefix = 'home'
            AND f.target_win_draw_loss IS NOT NULL
            AND f.target_oz IS NOT NULL
            AND f.target_total_amount IS NOT NULL
            AND m.numOfHeadsHome IS NOT NULL
            AND m.numOfHeadsAway IS NOT NULL
            LIMIT 1000
        """)).fetchall()
        
        if not sample_data:
            return {'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π'}
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
        df = pd.DataFrame([dict(row._mapping) for row in sample_data])
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        correlations = {}
        
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –º–∞—Ç—á–µ–π
        df['total_goals'] = df['numOfHeadsHome'] + df['numOfHeadsAway']
        df['home_win'] = (df['numOfHeadsHome'] > df['numOfHeadsAway']).astype(int)
        df['draw'] = (df['numOfHeadsHome'] == df['numOfHeadsAway']).astype(int)
        df['away_win'] = (df['numOfHeadsHome'] < df['numOfHeadsAway']).astype(int)
        df['both_score'] = ((df['numOfHeadsHome'] > 0) & (df['numOfHeadsAway'] > 0)).astype(int)
        
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å —Ç–∞—Ä–≥–µ—Ç–∞–º–∏
        target_columns = ['target_win_draw_loss', 'target_oz', 'target_total_amount']
        result_columns = ['home_win', 'draw', 'away_win', 'both_score', 'total_goals']
        
        for target in target_columns:
            if target in df.columns:
                correlations[target] = {}
                for result in result_columns:
                    if result in df.columns:
                        corr = df[target].corr(df[result])
                        correlations[target][result] = corr if not pd.isna(corr) else 0.0
        
        return correlations
    
    def suggest_new_features(self, analysis_results: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–æ–≤—ã–µ —Ñ–∏—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞."""
        logger.info('üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –Ω–æ–≤—ã–º —Ñ–∏—á–∞–º')
        
        suggestions = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        correlations = analysis_results.get('correlations', {})
        feature_coverage = analysis_results.get('feature_coverage', [])
        
        # 1. –§–∏—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º—ã –∫–æ–º–∞–Ω–¥
        suggestions.append({
            'category': '–§–æ—Ä–º–∞ –∫–æ–º–∞–Ω–¥',
            'features': [
                {
                    'name': 'home_form_last_5',
                    'description': '–§–æ—Ä–º–∞ –¥–æ–º–∞—à–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∞—Ç—á–µ–π (–æ—á–∫–∏)',
                    'calculation': '–°—É–º–º–∞ –æ—á–∫–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∞—Ç—á–µ–π',
                    'priority': 'HIGH',
                    'reason': '–§–æ—Ä–º–∞ –∫–æ–º–∞–Ω–¥—ã —Å–∏–ª—å–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç'
                },
                {
                    'name': 'away_form_last_5',
                    'description': '–§–æ—Ä–º–∞ –≥–æ—Å—Ç–µ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∞—Ç—á–µ–π (–æ—á–∫–∏)',
                    'calculation': '–°—É–º–º–∞ –æ—á–∫–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∞—Ç—á–µ–π',
                    'priority': 'HIGH',
                    'reason': '–§–æ—Ä–º–∞ –∫–æ–º–∞–Ω–¥—ã —Å–∏–ª—å–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç'
                },
                {
                    'name': 'form_difference',
                    'description': '–†–∞–∑–Ω–∏—Ü–∞ –≤ —Ñ–æ—Ä–º–µ –∫–æ–º–∞–Ω–¥',
                    'calculation': 'home_form_last_5 - away_form_last_5',
                    'priority': 'MEDIUM',
                    'reason': '–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ –∫–æ–º–∞–Ω–¥'
                }
            ]
        })
        
        # 2. –§–∏—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        suggestions.append({
            'category': '–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ —Ñ–∏—á–∏',
            'features': [
                {
                    'name': 'days_since_last_match_home',
                    'description': '–î–Ω–µ–π —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ç—á–∞ –¥–æ–º–∞—à–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã',
                    'calculation': '–†–∞–∑–Ω–∏—Ü–∞ –≤ –¥–Ω—è—Ö –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–º –º–∞—Ç—á–µ–º',
                    'priority': 'MEDIUM',
                    'reason': '–í–ª–∏—è–µ—Ç –Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã'
                },
                {
                    'name': 'days_since_last_match_away',
                    'description': '–î–Ω–µ–π —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ç—á–∞ –≥–æ—Å—Ç–µ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã',
                    'calculation': '–†–∞–∑–Ω–∏—Ü–∞ –≤ –¥–Ω—è—Ö –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–º –º–∞—Ç—á–µ–º',
                    'priority': 'MEDIUM',
                    'reason': '–í–ª–∏—è–µ—Ç –Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã'
                },
                {
                    'name': 'is_weekend_match',
                    'description': '–ú–∞—Ç—á –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏',
                    'calculation': '1 –µ—Å–ª–∏ —Å—É–±–±–æ—Ç–∞/–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 0 –∏–Ω–∞—á–µ',
                    'priority': 'LOW',
                    'reason': '–í–ª–∏—è–µ—Ç –Ω–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É'
                }
            ]
        })
        
        # 3. –§–∏—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        suggestions.append({
            'category': '–¢—É—Ä–Ω–∏—Ä–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è',
            'features': [
                {
                    'name': 'home_position',
                    'description': '–ü–æ–∑–∏—Ü–∏—è –¥–æ–º–∞—à–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã –≤ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ',
                    'calculation': '–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ —á–µ–º–ø–∏–æ–Ω–∞—Ç–µ',
                    'priority': 'HIGH',
                    'reason': '–ü—Ä—è–º–æ –æ—Ç—Ä–∞–∂–∞–µ—Ç —Å–∏–ª—É –∫–æ–º–∞–Ω–¥—ã'
                },
                {
                    'name': 'away_position',
                    'description': '–ü–æ–∑–∏—Ü–∏—è –≥–æ—Å—Ç–µ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã –≤ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ',
                    'calculation': '–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ —á–µ–º–ø–∏–æ–Ω–∞—Ç–µ',
                    'priority': 'HIGH',
                    'reason': '–ü—Ä—è–º–æ –æ—Ç—Ä–∞–∂–∞–µ—Ç —Å–∏–ª—É –∫–æ–º–∞–Ω–¥—ã'
                },
                {
                    'name': 'position_difference',
                    'description': '–†–∞–∑–Ω–∏—Ü–∞ –≤ –ø–æ–∑–∏—Ü–∏—è—Ö –∫–æ–º–∞–Ω–¥',
                    'calculation': 'abs(home_position - away_position)',
                    'priority': 'MEDIUM',
                    'reason': '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –≤ –∫–ª–∞—Å—Å–µ –∫–æ–º–∞–Ω–¥'
                }
            ]
        })
        
        # 4. –§–∏—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–æ–ª–æ–≤
        suggestions.append({
            'category': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ–ª–æ–≤',
            'features': [
                {
                    'name': 'home_goals_per_match',
                    'description': '–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ–≤ –¥–æ–º–∞—à–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã –∑–∞ –º–∞—Ç—á',
                    'calculation': '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ–≤ / –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π',
                    'priority': 'HIGH',
                    'reason': '–ü—Ä—è–º–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º'
                },
                {
                    'name': 'away_goals_per_match',
                    'description': '–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ–≤ –≥–æ—Å—Ç–µ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã –∑–∞ –º–∞—Ç—á',
                    'calculation': '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ–≤ / –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π',
                    'priority': 'HIGH',
                    'reason': '–ü—Ä—è–º–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º'
                },
                {
                    'name': 'home_conceded_per_match',
                    'description': '–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –≥–æ–ª–æ–≤ –¥–æ–º–∞—à–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã',
                    'calculation': '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –≥–æ–ª–æ–≤ / –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π',
                    'priority': 'HIGH',
                    'reason': '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–∞–±–æ—Å—Ç—å –∑–∞—â–∏—Ç—ã'
                },
                {
                    'name': 'away_conceded_per_match',
                    'description': '–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –≥–æ–ª–æ–≤ –≥–æ—Å—Ç–µ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã',
                    'calculation': '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –≥–æ–ª–æ–≤ / –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π',
                    'priority': 'HIGH',
                    'reason': '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–∞–±–æ—Å—Ç—å –∑–∞—â–∏—Ç—ã'
                }
            ]
        })
        
        # 5. –§–∏—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        suggestions.append({
            'category': '–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è',
            'features': [
                {
                    'name': 'temperature',
                    'description': '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ –≤–æ –≤—Ä–µ–º—è –º–∞—Ç—á–∞',
                    'calculation': '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö –¶–µ–ª—å—Å–∏—è',
                    'priority': 'LOW',
                    'reason': '–í–ª–∏—è–µ—Ç –Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–æ–≤'
                },
                {
                    'name': 'humidity',
                    'description': '–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞',
                    'calculation': '–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö',
                    'priority': 'LOW',
                    'reason': '–í–ª–∏—è–µ—Ç –Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–æ–≤'
                },
                {
                    'name': 'wind_speed',
                    'description': '–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞',
                    'calculation': '–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ –≤ –º/—Å',
                    'priority': 'LOW',
                    'reason': '–í–ª–∏—è–µ—Ç –Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—å —É–¥–∞—Ä–æ–≤'
                }
            ]
        })
        
        # 6. –§–∏—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–∞–≤–∞ –∫–æ–º–∞–Ω–¥
        suggestions.append({
            'category': '–°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥',
            'features': [
                {
                    'name': 'home_key_player_injured',
                    'description': '–ö–ª—é—á–µ–≤—ã–µ –∏–≥—Ä–æ–∫–∏ –¥–æ–º–∞—à–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–∞–≤–º–∏—Ä–æ–≤–∞–Ω—ã',
                    'calculation': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–≤–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤',
                    'priority': 'MEDIUM',
                    'reason': '–í–ª–∏—è–µ—Ç –Ω–∞ —Å–∏–ª—É –∫–æ–º–∞–Ω–¥—ã'
                },
                {
                    'name': 'away_key_player_injured',
                    'description': '–ö–ª—é—á–µ–≤—ã–µ –∏–≥—Ä–æ–∫–∏ –≥–æ—Å—Ç–µ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–∞–≤–º–∏—Ä–æ–≤–∞–Ω—ã',
                    'calculation': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–≤–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤',
                    'priority': 'MEDIUM',
                    'reason': '–í–ª–∏—è–µ—Ç –Ω–∞ —Å–∏–ª—É –∫–æ–º–∞–Ω–¥—ã'
                },
                {
                    'name': 'home_suspensions',
                    'description': '–î–∏—Å–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –¥–æ–º–∞—à–Ω–µ–π –∫–æ–º–∞–Ω–¥–µ',
                    'calculation': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤',
                    'priority': 'MEDIUM',
                    'reason': '–í–ª–∏—è–µ—Ç –Ω–∞ —Å–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã'
                },
                {
                    'name': 'away_suspensions',
                    'description': '–î–∏—Å–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –≥–æ—Å—Ç–µ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ',
                    'calculation': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤',
                    'priority': 'MEDIUM',
                    'reason': '–í–ª–∏—è–µ—Ç –Ω–∞ —Å–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã'
                }
            ]
        })
        
        return suggestions
    
    def generate_feature_analysis_report(self, analysis_results: Dict[str, Any], suggestions: List[Dict[str, Any]]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ñ–∏—á–µ–π."""
        report = []
        report.append("=" * 80)
        report.append("–ê–ù–ê–õ–ò–ó –§–ò–ß–ï–ô –ò –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ")
        report.append("=" * 80)
        report.append(f"–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        report.append("")
        
        # –¢–µ–∫—É—â–∏–µ —Ñ–∏—á–∏
        report.append("üìä –¢–ï–ö–£–©–ò–ï –§–ò–ß–ò:")
        report.append("-" * 40)
        
        feature_stats = analysis_results.get('feature_stats', [])
        for stat in feature_stats:
            report.append(f"–ü—Ä–µ—Ñ–∏–∫—Å {stat['prefix']}:")
            report.append(f"  –ó–∞–ø–∏—Å–µ–π: {stat['total_records']:,}")
            report.append(f"  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π: {stat['unique_matches']:,}")
            report.append(f"  –ü–æ–∫—Ä—ã—Ç–∏–µ WDL: {stat['wdl_coverage']:.2%}")
            report.append(f"  –ü–æ–∫—Ä—ã—Ç–∏–µ OZ: {stat['oz_coverage']:.2%}")
            report.append(f"  –ü–æ–∫—Ä—ã—Ç–∏–µ Total: {stat['total_coverage']:.2%}")
            report.append("")
        
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        correlations = analysis_results.get('correlations', {})
        if correlations and 'error' not in correlations:
            report.append("üîó –ö–û–†–†–ï–õ–Ø–¶–ò–ò –° –†–ï–ó–£–õ–¨–¢–ê–¢–ê–ú–ò:")
            report.append("-" * 40)
            
            for target, corrs in correlations.items():
                report.append(f"{target}:")
                for result, corr in corrs.items():
                    report.append(f"  {result}: {corr:.3f}")
                report.append("")
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –Ω–æ–≤—ã–º —Ñ–∏—á–∞–º
        report.append("üí° –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ü–û –ù–û–í–´–ú –§–ò–ß–ê–ú:")
        report.append("-" * 40)
        
        for category in suggestions:
            report.append(f"\nüìÅ {category['category']}:")
            
            for feature in category['features']:
                priority_emoji = {
                    'HIGH': 'üî¥',
                    'MEDIUM': 'üü°',
                    'LOW': 'üü¢'
                }
                
                emoji = priority_emoji.get(feature['priority'], '‚ùì')
                report.append(f"  {emoji} {feature['name']}")
                report.append(f"     –û–ø–∏—Å–∞–Ω–∏–µ: {feature['description']}")
                report.append(f"     –†–∞—Å—á–µ—Ç: {feature['calculation']}")
                report.append(f"     –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {feature['priority']}")
                report.append(f"     –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {feature['reason']}")
                report.append("")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
        report.append("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ü–†–ò–û–†–ò–¢–ï–¢–ê–ú:")
        report.append("-" * 40)
        
        high_priority_features = []
        medium_priority_features = []
        low_priority_features = []
        
        for category in suggestions:
            for feature in category['features']:
                if feature['priority'] == 'HIGH':
                    high_priority_features.append(f"{category['category']}: {feature['name']}")
                elif feature['priority'] == 'MEDIUM':
                    medium_priority_features.append(f"{category['category']}: {feature['name']}")
                else:
                    low_priority_features.append(f"{category['category']}: {feature['name']}")
        
        report.append("üî¥ –í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ (—Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å):")
        for feature in high_priority_features:
            report.append(f"  - {feature}")
        
        report.append("\nüü° –°–†–ï–î–ù–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ (—Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–æ –≤—Ç–æ—Ä—É—é –æ—á–µ—Ä–µ–¥—å):")
        for feature in medium_priority_features:
            report.append(f"  - {feature}")
        
        report.append("\nüü¢ –ù–ò–ó–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ (—Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—á–µ—Ä–µ–¥—å):")
        for feature in low_priority_features:
            report.append(f"  - {feature}")
        
        report.append("")
        report.append("=" * 80)
        
        return "\n".join(report)
    
    def save_analysis_results(self, analysis_results: Dict[str, Any], suggestions: List[Dict[str, Any]]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞."""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON –¥–∞–Ω–Ω—ã–µ
        json_file = os.path.join(self.output_dir, f'feature_analysis_{timestamp}.json')
        with open(json_file, 'w', encoding='utf-8') as f:
            json.dump({
                'analysis_results': analysis_results,
                'suggestions': suggestions
            }, f, ensure_ascii=False, indent=2, default=str)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report = self.generate_feature_analysis_report(analysis_results, suggestions)
        report_file = os.path.join(self.output_dir, f'feature_analysis_report_{timestamp}.txt')
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(report)
        
        logger.info(f'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {self.output_dir}')
        return report_file


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∏—á–µ–π."""
    analyzer = FeatureAnalysis()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏—á–∏
    logger.info('üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ñ–∏—á–µ–π')
    analysis_results = analyzer.analyze_current_features()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    suggestions = analyzer.suggest_new_features(analysis_results)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    report_file = analyzer.save_analysis_results(analysis_results, suggestions)
    
    logger.info(f'üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}')
    
    # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
    print("\n" + analyzer.generate_feature_analysis_report(analysis_results, suggestions))


if __name__ == '__main__':
    main()
