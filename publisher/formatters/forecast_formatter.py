"""
–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ (regular –∏ quality).
"""

import logging
from datetime import date
from typing import List, Dict

from publisher.forecast_helpers import get_feature_description
from db.queries.statistics_cache import get_complete_statistics_cached as get_complete_statistics

logger = logging.getLogger(__name__)


def get_feature_sort_order(feature: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è feature."""
    order_map = {
        1: 1, 2: 2, 5: 3, 8: 4, 6: 5, 9: 6, 7: 7, 10: 8, 3: 9, 4: 10
    }
    return order_map.get(feature, 99)


def get_forecast_type_sort_order(forecast_type: str) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è forecast_type."""
    order_map = {
        'win_draw_loss': 1, 'oz': 2, 'total': 3, 'total_amount': 4,
        'total_home': 5, 'total_home_amount': 6, 'total_away': 7,
        'total_away_amount': 8, 'goal_home': 9, 'goal_away': 10
    }
    return order_map.get(forecast_type.lower() if forecast_type else '', 99)


class ForecastFormatter:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç."""
    
    def format_daily_forecasts_regular(self, forecasts_data: List[Dict], target_date: date) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç regular –ø—Ä–æ–≥–Ω–æ–∑—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç.
        
        Args:
            forecasts_data: –°–ø–∏—Å–æ–∫ —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞—Ç—á–∞—Ö
            target_date: –î–∞—Ç–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
        """
        report = f"üìä –û–ë–´–ß–ù–´–ï –ü–†–û–ì–ù–û–ó–´ - {target_date.strftime('%d.%m.%Y')}\n\n"
        
        for item in forecasts_data:
            match = item['match']
            forecasts = item['forecasts']
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
            sorted_forecasts = sorted(forecasts, key=lambda x: get_feature_sort_order(x.get('feature', 0)))
            
            report += f"üÜî Match ID: {match['id']}\n"
            report += f"üèÜ {match.get('sportName', 'Unknown')} - {match.get('championshipName', 'Unknown')}\n"
            report += f"‚öΩ {match.get('team_home_name', 'Unknown')} vs {match.get('team_away_name', 'Unknown')}\n"
            report += f"üïê {match.get('gameData', '').strftime('%H:%M') if match.get('gameData') else 'TBD'}\n\n"
            report += f"üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ì–ù–û–ó–ê:\n\n"
            
            for forecast in sorted_forecasts:
                feature = forecast.get('feature', 0)
                outcome = forecast.get('outcome', '')
                probability = forecast.get('probability', 0) * 100 if forecast.get('probability') else 0
                confidence = forecast.get('confidence', 0) * 100 if forecast.get('confidence') else 0
                uncertainty = forecast.get('uncertainty', 0) * 100 if forecast.get('uncertainty') else 0
                lower_bound = forecast.get('lower_bound', 0)
                upper_bound = forecast.get('upper_bound', 0)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                hist_stats = self._get_extended_statistics_for_feature(feature, outcome)
                feature_desc = get_feature_description(feature, outcome)
                
                report += f"‚Ä¢ {feature_desc}: {outcome}\n"
                report += f"  üéØ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {probability:.1f}% | üîí –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1f}% | üìä –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å: {uncertainty:.1f}%\n"
                report += f"  üìà –ì—Ä–∞–Ω–∏—Ü—ã: [{lower_bound:.2f} - {upper_bound:.2f}]"
                
                if hist_stats:
                    report += f" | ‚öñÔ∏è –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞: {hist_stats.get('calibration', 0):.1f}% | üõ°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {hist_stats.get('stability', 0):.1f}%\n"
                    
                    acc_mark = "üìä" if hist_stats.get('historical_accuracy', 0) >= 0.7 else "üìâ"
                    report += f"  {acc_mark} –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {hist_stats.get('historical_correct', 0)}/{hist_stats.get('historical_total', 0)} ({hist_stats.get('historical_accuracy', 0)*100:.1f}%)"
                    
                    recent_mark = "üî•" if hist_stats.get('recent_accuracy', 0) >= 0.7 else "‚ùÑÔ∏è"
                    report += f" | {recent_mark} –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10: {hist_stats.get('recent_correct', 0)}/10 ({hist_stats.get('recent_accuracy', 0)*100:.1f}%)\n"
                else:
                    report += "\n"
                
            report += "\n"
        
        return report
    
    def format_daily_forecasts_quality(self, forecasts_data: List[Dict], target_date: date) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç quality –ø—Ä–æ–≥–Ω–æ–∑—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç.
        
        Args:
            forecasts_data: –°–ø–∏—Å–æ–∫ —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞—Ç—á–∞—Ö
            target_date: –î–∞—Ç–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
        """
        report = f"üåü –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ï –ü–†–û–ì–ù–û–ó–´ - {target_date.strftime('%d.%m.%Y')}\n\n"
        
        for item in forecasts_data:
            match = item['match']
            forecasts = item['forecasts']
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É (–ø–æ forecast_type –¥–ª—è quality)
            sorted_forecasts = sorted(forecasts, key=lambda x: get_forecast_type_sort_order(x.get('forecast_type', '')))
            
            report += f"üèÜ {match.get('sportName', 'Unknown')} - {match.get('championshipName', 'Unknown')}\n"
            report += f"üÜî Match ID: {match['id']}\n"
            report += f"‚öΩ {match.get('team_home_name', 'Unknown')} vs {match.get('team_away_name', 'Unknown')}\n"
            report += f"üïê {match.get('gameData', '').strftime('%H:%M') if match.get('gameData') else 'TBD'}\n\n"
            report += f"üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ì–ù–û–ó–ê:\n\n"
            
            for stat in sorted_forecasts:
                forecast_type = stat.get('forecast_type', '')
                forecast_subtype = stat.get('forecast_subtype', '')
                accuracy = stat.get('prediction_accuracy', 0) * 100 if stat.get('prediction_accuracy') else 0
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                from publisher.forecast_helpers import get_forecast_type_subtype
                hist_stats = self._get_historical_statistics(forecast_type, forecast_subtype)
                
                report += f"‚Ä¢ {forecast_type}: {forecast_subtype}\n"
                report += f"  üéØ –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {accuracy:.1f}%\n"
                
                if hist_stats:
                    confidence = hist_stats.get('confidence', 0) * 100
                    uncertainty = hist_stats.get('uncertainty', 0) * 100
                    calibration = hist_stats.get('calibration', 0) * 100
                    stability = hist_stats.get('stability', 0) * 100
                    
                    report += f"  üîí –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1f}% | üìä –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å: {uncertainty:.1f}%\n"
                    report += f"  ‚öñÔ∏è –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞: {calibration:.1f}% | üõ°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {stability:.1f}%\n"
                    
                    acc_mark = "üìä" if hist_stats.get('historical_accuracy', 0) >= 0.7 else "üìâ"
                    report += f"  {acc_mark} –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {hist_stats.get('historical_correct', 0)}/{hist_stats.get('historical_total', 0)} ({hist_stats.get('historical_accuracy', 0)*100:.1f}%)"
                    
                    recent_mark = "üî•" if hist_stats.get('recent_accuracy', 0) >= 0.7 else "‚ùÑÔ∏è"
                    report += f" | {recent_mark} –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10: {hist_stats.get('recent_correct', 0)}/10 ({hist_stats.get('recent_accuracy', 0)*100:.1f}%)\n"
                
            report += "\n"
        
        return report
    
    def _get_extended_statistics_for_feature(self, feature: int, outcome: str = '') -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è feature —Å —É—á–µ—Ç–æ–º outcome.
        
        Args:
            feature: –ö–æ–¥ feature (1-10)
            outcome: –ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ø1', '—Ç–±', '–æ–±–µ –∑–∞–±—å—é—Ç - –¥–∞')
            
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """
        from publisher.forecast_helpers import FEATURE_TYPE_MAPPING, get_empty_statistics
        
        try:
            forecast_type = FEATURE_TYPE_MAPPING.get(feature, 'Unknown')
            if forecast_type == 'Unknown':
                return get_empty_statistics()
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º outcome –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ë–î (lowercase)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É, —Ç.–∫. outcome –º–æ–∂–µ—Ç –±—ã—Ç—å —á–∏—Å–ª–æ–º (float) –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
            forecast_subtype = str(outcome).lower().strip() if outcome else ''
            
            stats = get_complete_statistics(forecast_type, forecast_subtype=forecast_subtype)
            
            return {
                'calibration': stats.get('calibration', 0.75) * 100,
                'stability': stats.get('stability', 0.80) * 100,
                'confidence': stats.get('confidence', 0.75) * 100,
                'uncertainty': stats.get('uncertainty', 0.25) * 100,
                'lower_bound': stats.get('lower_bound', 0.5),
                'upper_bound': stats.get('upper_bound', 0.9),
                'historical_correct': stats.get('historical_correct', 0),
                'historical_total': stats.get('historical_total', 0),
                'historical_accuracy': stats.get('historical_accuracy', 0.0),
                'recent_correct': stats.get('recent_correct', 0),
                'recent_accuracy': stats.get('recent_accuracy', 0.0)
            }
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è feature {feature}, outcome {outcome}: {e}')
            from publisher.forecast_helpers import get_empty_statistics
            return get_empty_statistics()
    
    def _get_historical_statistics(self, forecast_type: str, forecast_subtype: str) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ç–∏–ø–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞."""
        try:
            return get_complete_statistics(forecast_type, forecast_subtype)
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {forecast_type}/{forecast_subtype}: {e}')
            return {}

