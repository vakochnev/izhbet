#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ statistics_optimized
"""

import logging
from sqlalchemy import func, text, case
from config import Session_pool
from db.models.statistics import Statistic
from db.models.outcome import Outcome
from db.models.prediction import Prediction
from db.models.match import Match
from db.models.championship import ChampionShip
from db.models.sport import Sport

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def analyze_prediction_quality():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤ statistics_optimized"""
    
    print("üîç –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –ü–†–û–ì–ù–û–ó–û–í")
    print("=" * 60)
    
    with Session_pool() as db_session:
        # 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("-" * 40)
        
        total_records = db_session.query(Statistic).count()
        print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ statistics_optimized: {total_records:,}")
        
        # –ó–∞–ø–∏—Å–∏ —Å outcomes
        with_outcomes = db_session.query(Statistic).filter(
            Statistic.outcome_id.isnot(None)
        ).count()
        print(f"–ó–∞–ø–∏—Å–µ–π —Å outcomes: {with_outcomes:,} ({with_outcomes/total_records*100:.1f}%)")
        
        # –ó–∞–ø–∏—Å–∏ —Å predictions
        with_predictions = db_session.query(StatisticsOptimized).filter(
            StatisticsOptimized.prediction_id.isnot(None)
        ).count()
        print(f"–ó–∞–ø–∏—Å–µ–π —Å predictions: {with_predictions:,} ({with_predictions/total_records*100:.1f}%)")
        
        # 2. –ê–Ω–∞–ª–∏–∑ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        print("\nüéØ –ê–ù–ê–õ–ò–ó –¢–û–ß–ù–û–°–¢–ò –ü–†–û–ì–ù–û–ó–û–í")
        print("-" * 40)
        
        # –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
        correct_predictions = db_session.query(StatisticsOptimized).filter(
            StatisticsOptimized.prediction_correct == True
        ).count()
        
        total_with_correctness = db_session.query(StatisticsOptimized).filter(
            StatisticsOptimized.prediction_correct.isnot(None)
        ).count()
        
        if total_with_correctness > 0:
            accuracy = correct_predictions / total_with_correctness * 100
            print(f"–û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {accuracy:.2f}% ({correct_predictions:,}/{total_with_correctness:,})")
        else:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
        
        # 3. –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        print("\nüìà –ê–ù–ê–õ–ò–ó –ü–û –¢–ò–ü–ê–ú –ü–†–û–ì–ù–û–ó–û–í")
        print("-" * 40)
        
        type_stats = db_session.query(
            StatisticsOptimized.forecast_type,
            func.count(StatisticsOptimized.id).label('total'),
            func.sum(case((StatisticsOptimized.prediction_correct == True, 1), else_=0)).label('correct'),
            func.avg(case((StatisticsOptimized.prediction_correct == True, 1), else_=0)).label('accuracy')
        ).group_by(StatisticsOptimized.forecast_type).all()
        
        for stat in type_stats:
            accuracy_pct = (stat.accuracy * 100) if stat.accuracy else 0
            print(f"{stat.forecast_type:20} | {stat.total:6,} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ | {stat.correct:6,} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö | {accuracy_pct:6.2f}%")
        
        # 4. –ê–Ω–∞–ª–∏–∑ –ø–æ –º–æ–¥–µ–ª—è–º
        print("\nü§ñ –ê–ù–ê–õ–ò–ó –ü–û –ú–û–î–ï–õ–Ø–ú")
        print("-" * 40)
        
        model_stats = db_session.query(
            StatisticsOptimized.model_name,
            func.count(StatisticsOptimized.id).label('total'),
            func.sum(case((StatisticsOptimized.prediction_correct == True, 1), else_=0)).label('correct'),
            func.avg(case((StatisticsOptimized.prediction_correct == True, 1), else_=0)).label('accuracy')
        ).group_by(StatisticsOptimized.model_name).all()
        
        for stat in model_stats:
            accuracy_pct = (stat.accuracy * 100) if stat.accuracy else 0
            print(f"{stat.model_name:20} | {stat.total:6,} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ | {stat.correct:6,} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö | {accuracy_pct:6.2f}%")
        
        # 5. –ê–Ω–∞–ª–∏–∑ –ø–æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞–º
        print("\nüèÜ –ê–ù–ê–õ–ò–ó –ü–û –ß–ï–ú–ü–ò–û–ù–ê–¢–ê–ú")
        print("-" * 40)
        
        champ_stats = db_session.query(
            ChampionShip.championshipName,
            func.count(StatisticsOptimized.id).label('total'),
            func.sum(case((StatisticsOptimized.prediction_correct == True, 1), else_=0)).label('correct'),
            func.avg(case((StatisticsOptimized.prediction_correct == True, 1), else_=0)).label('accuracy')
        ).join(StatisticsOptimized, StatisticsOptimized.championship_id == ChampionShip.id).group_by(ChampionShip.championshipName).all()
        
        for stat in champ_stats:
            accuracy_pct = (stat.accuracy * 100) if stat.accuracy else 0
            print(f"{stat.championshipName:30} | {stat.total:6,} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ | {stat.correct:6,} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö | {accuracy_pct:6.2f}%")
        
        # 6. –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑
        print("\nüìÖ –í–†–ï–ú–ï–ù–ù–û–ô –ê–ù–ê–õ–ò–ó")
        print("-" * 40)
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        recent_stats = db_session.query(
            func.count(StatisticsOptimized.id).label('total'),
            func.sum(case((StatisticsOptimized.prediction_correct == True, 1), else_=0)).label('correct')
        ).filter(
            StatisticsOptimized.created_at >= text("CURDATE() - INTERVAL 30 DAY")
        ).first()
        
        if recent_stats and recent_stats.total > 0:
            recent_accuracy = recent_stats.correct / recent_stats.total * 100
            print(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π: {recent_stats.total:,} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤, {recent_stats.correct:,} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö ({recent_accuracy:.2f}%)")
        
        # 7. –ê–Ω–∞–ª–∏–∑ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
        print("\nüí∞ –ê–ù–ê–õ–ò–ó –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–û–í")
        print("-" * 40)
        
        coeff_stats = db_session.query(
            func.count(StatisticsOptimized.id).label('total'),
            func.avg(StatisticsOptimized.coefficient).label('avg_coeff'),
            func.min(StatisticsOptimized.coefficient).label('min_coeff'),
            func.max(StatisticsOptimized.coefficient).label('max_coeff')
        ).filter(StatisticsOptimized.coefficient.isnot(None)).first()
        
        if coeff_stats and coeff_stats.total > 0:
            print(f"–ü—Ä–æ–≥–Ω–æ–∑–æ–≤ —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏: {coeff_stats.total:,}")
            print(f"–°—Ä–µ–¥–Ω–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {coeff_stats.avg_coeff:.2f}")
            print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {coeff_stats.min_coeff:.2f}")
            print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {coeff_stats.max_coeff:.2f}")
        else:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞—Ö")
        
        # 8. –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
        print("\nüíµ –ê–ù–ê–õ–ò–ó –ü–†–ò–ë–´–õ–¨–ù–û–°–¢–ò")
        print("-" * 40)
        
        profit_stats = db_session.query(
            func.count(StatisticsOptimized.id).label('total'),
            func.sum(StatisticsOptimized.potential_profit).label('total_potential'),
            func.sum(StatisticsOptimized.actual_profit).label('total_actual'),
            func.avg(StatisticsOptimized.potential_profit).label('avg_potential'),
            func.avg(StatisticsOptimized.actual_profit).label('avg_actual')
        ).filter(StatisticsOptimized.potential_profit.isnot(None)).first()
        
        if profit_stats and profit_stats.total > 0:
            print(f"–ü—Ä–æ–≥–Ω–æ–∑–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–∏–±—ã–ª–∏: {profit_stats.total:,}")
            print(f"–û–±—â–∞—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {profit_stats.total_potential:.2f}")
            print(f"–û–±—â–∞—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–∏–±—ã–ª—å: {profit_stats.total_actual:.2f}")
            print(f"–°—Ä–µ–¥–Ω—è—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {profit_stats.avg_potential:.2f}")
            print(f"–°—Ä–µ–¥–Ω—è—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–∏–±—ã–ª—å: {profit_stats.avg_actual:.2f}")
        else:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏")
        
        # 9. –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
        print("\n‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ù–´–ï –û–ë–õ–ê–°–¢–ò")
        print("-" * 40)
        
        # –¢–∏–ø—ã —Å –Ω–∏–∑–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
        low_accuracy_types = [stat for stat in type_stats if stat.accuracy and stat.accuracy < 0.3]
        if low_accuracy_types:
            print("–¢–∏–ø—ã –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —Å –Ω–∏–∑–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é (<30%):")
            for stat in low_accuracy_types:
                accuracy_pct = stat.accuracy * 100
                print(f"  - {stat.forecast_type}: {accuracy_pct:.1f}% ({stat.correct}/{stat.total})")
        
        # –ú–æ–¥–µ–ª–∏ —Å –Ω–∏–∑–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
        low_accuracy_models = [stat for stat in model_stats if stat.accuracy and stat.accuracy < 0.3]
        if low_accuracy_models:
            print("\n–ú–æ–¥–µ–ª–∏ —Å –Ω–∏–∑–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é (<30%):")
            for stat in low_accuracy_models:
                accuracy_pct = stat.accuracy * 100
                print(f"  - {stat.model_name}: {accuracy_pct:.1f}% ({stat.correct}/{stat.total})")
        
        # 10. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
        print("-" * 40)
        
        if total_with_correctness > 0:
            if accuracy < 50:
                print("üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –Ω–∏–∂–µ 50%")
                print("   - –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
                print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                print("   - –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π")
            elif accuracy < 70:
                print("üü° –í–ù–ò–ú–ê–ù–ò–ï: –¢–æ—á–Ω–æ—Å—Ç—å –Ω–∏–∂–µ 70%")
                print("   - –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")
                print("   - –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
            else:
                print("üü¢ –•–û–†–û–®–û: –¢–æ—á–Ω–æ—Å—Ç—å –≤—ã—à–µ 70%")
                print("   - –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ")
                print("   - –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø–∞–º
        if low_accuracy_types:
            print(f"\nüìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:")
            for stat in low_accuracy_types:
                print(f"   - {stat.forecast_type}: —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞")
        
        print("\n" + "=" * 60)
        print("–ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")

if __name__ == "__main__":
    analyze_prediction_quality()
