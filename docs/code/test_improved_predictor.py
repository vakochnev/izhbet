#!/usr/bin/env python3
import logging
import os
import pandas as pd
import numpy as np
from typing import Dict, Any, List
import joblib
import glob

from config import Session_pool
from db.models import Feature, Match
from core.constants import TARGET_FIELDS, DROP_FIELD_EMBEDDING

logging.basicConfig(level=logging.INFO, format='%(message)s')
logger = logging.getLogger(__name__)

META = {'id', 'match_id', 'prefix', 'created_at', 'updated_at'}


class ImprovedPredictor:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä —Å –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–º–∏ —Ñ–∏—á–∞–º–∏ –∏ –∞–Ω—Å–∞–º–±–ª–µ–≤—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏."""
    
    def __init__(self, models_dir: str = 'results/quality/improved_models'):
        self.models_dir = models_dir
        self.models = {}
        self.scalers = {}
        self.feature_names = {}
        self.load_models()
    
    def load_models(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏."""
        print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...")
        
        targets = ['wdl', 'oz', 'total_amount']
        
        for target in targets:
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏
                rf_path = os.path.join(self.models_dir, f'{target}_rf_model.joblib')
                gb_path = os.path.join(self.models_dir, f'{target}_gb_model.joblib')
                scaler_path = os.path.join(self.models_dir, f'{target}_scaler.joblib')
                metadata_path = os.path.join(self.models_dir, f'{target}_metadata.joblib')
                
                if all(os.path.exists(p) for p in [rf_path, gb_path, scaler_path, metadata_path]):
                    self.models[target] = {
                        'rf': joblib.load(rf_path),
                        'gb': joblib.load(gb_path)
                    }
                    self.scalers[target] = joblib.load(scaler_path)
                    metadata = joblib.load(metadata_path)
                    self.feature_names[target] = metadata['feature_names']
                    print(f"‚úÖ {target}: –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                else:
                    print(f"‚ùå {target}: –Ω–µ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
                    
            except Exception as e:
                print(f"‚ùå {target}: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ - {e}")
    
    def prepare_features(self, match_id: int) -> Dict[str, pd.DataFrame]:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–∏—á–∏ –¥–ª—è –º–∞—Ç—á–∞."""
        with Session_pool() as db:
            rows = (
                db.query(Feature)
                .filter(Feature.match_id == match_id)
                .all()
            )
        
        if not rows:
            return {}
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        record = {'match_id': match_id}
        for r in rows:
            d = r.as_dict()
            pref = d['prefix']
            
            for k, v in d.items():
                if k in META or k in DROP_FIELD_EMBEDDING or k.startswith('_'):
                    continue
                if k in TARGET_FIELDS:
                    continue
                record[f'{pref}_{k}'] = v
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame([record])
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ü–µ–ª–∏
        prepared_features = {}
        for target, feature_list in self.feature_names.items():
            available_features = [f for f in feature_list if f in df.columns]
            if available_features:
                X = df[available_features].copy()
                # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —á–∏—Å–ª–æ–≤—ã–º —Ç–∏–ø–∞–º
                for col in X.columns:
                    X[col] = pd.to_numeric(X[col], errors='coerce')
                X = X.fillna(0.0).astype(float)
                prepared_features[target] = X
            else:
                print(f"‚ö†Ô∏è {target}: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏—á–µ–π")
        
        return prepared_features
    
    def predict_match(self, match_id: int) -> Dict[str, Any]:
        """–î–µ–ª–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –º–∞—Ç—á–∞."""
        print(f"\nüéØ –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –º–∞—Ç—á–∞ {match_id}")
        print("-" * 30)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏—á–∏
        features = self.prepare_features(match_id)
        
        if not features:
            return {'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞—Ç—á–∞'}
        
        predictions = {}
        
        for target, X in features.items():
            if target not in self.models:
                continue
            
            try:
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ñ–∏—á–∏
                X_scaled = self.scalers[target].transform(X)
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –æ—Ç –æ–±–µ–∏—Ö –º–æ–¥–µ–ª–µ–π
                rf_pred = self.models[target]['rf'].predict(X_scaled)[0]
                gb_pred = self.models[target]['gb'].predict(X_scaled)[0]
                
                # –ê–Ω—Å–∞–º–±–ª—å
                if target in ['wdl', 'oz']:
                    # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è - –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
                    ensemble_pred = int(np.round((rf_pred + gb_pred) / 2))
                else:
                    # –†–µ–≥—Ä–µ—Å—Å–∏—è - —Å—Ä–µ–¥–Ω–µ–µ
                    ensemble_pred = (rf_pred + gb_pred) / 2
                
                predictions[target] = {
                    'rf_prediction': rf_pred,
                    'gb_prediction': gb_pred,
                    'ensemble_prediction': ensemble_pred
                }
                
                print(f"{target}: RF={rf_pred}, GB={gb_pred}, –ê–Ω—Å–∞–º–±–ª—å={ensemble_pred}")
                
            except Exception as e:
                print(f"‚ùå {target}: –æ—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è - {e}")
                predictions[target] = {'error': str(e)}
        
        return predictions
    
    def batch_predict(self, match_ids: List[int]) -> Dict[int, Dict[str, Any]]:
        """–î–µ–ª–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ –º–∞—Ç—á–µ–π."""
        results = {}
        
        for match_id in match_ids:
            try:
                results[match_id] = self.predict_match(match_id)
            except Exception as e:
                results[match_id] = {'error': str(e)}
        
        return results


def test_improved_predictor():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä."""
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ü–†–ï–î–ò–ö–¢–û–†–ê")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä
    predictor = ImprovedPredictor()
    
    if not predictor.models:
        print("‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∞—Ç—á–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    with Session_pool() as db:
        match_ids = (
            db.query(Feature.match_id)
            .group_by(Feature.match_id)
            .limit(5)
            .all()
        )
        test_match_ids = [r[0] for r in match_ids]
    
    print(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ {len(test_match_ids)} –º–∞—Ç—á–∞—Ö")
    
    # –î–µ–ª–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
    results = predictor.batch_predict(test_match_ids)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for match_id, predictions in results.items():
        print(f"\n–ú–∞—Ç—á {match_id}:")
        if 'error' in predictions:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {predictions['error']}")
        else:
            for target, pred_data in predictions.items():
                if 'error' not in pred_data:
                    print(f"  {target}: {pred_data['ensemble_prediction']}")


def compare_with_actual_results():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏."""
    print("\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –° –§–ê–ö–¢–ò–ß–ï–°–ö–ò–ú–ò –†–ï–ó–£–õ–¨–¢–ê–¢–ê–ú–ò")
    print("=" * 50)
    
    predictor = ImprovedPredictor()
    
    if not predictor.models:
        print("‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    with Session_pool() as db:
        query = db.query(Feature, Match).join(Match, Feature.match_id == Match.id).filter(
            Feature.prefix == 'home',
            Match.numOfHeadsHome.isnot(None),
            Match.numOfHeadsAway.isnot(None)
        ).limit(10)
        
        results = query.all()
    
    if not results:
        print("‚ùå –ù–µ—Ç –º–∞—Ç—á–µ–π —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏")
        return
    
    correct_predictions = 0
    total_predictions = 0
    
    for feature, match in results:
        match_id = match.id
        home_goals = match.numOfHeadsHome
        away_goals = match.numOfHeadsAway
        
        print(f"\n–ú–∞—Ç—á {match_id}: {home_goals}:{away_goals}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑
        predictions = predictor.predict_match(match_id)
        
        if 'error' not in predictions:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º WDL
            if 'wdl' in predictions:
                wdl_pred = predictions['wdl']['ensemble_prediction']
                wdl_actual = 0 if home_goals > away_goals else (1 if home_goals == away_goals else 2)
                
                wdl_correct = wdl_pred == wdl_actual
                print(f"  WDL: –ø—Ä–æ–≥–Ω–æ–∑={wdl_pred}, —Ñ–∞–∫—Ç={wdl_actual}, {'‚úÖ' if wdl_correct else '‚ùå'}")
                
                if wdl_correct:
                    correct_predictions += 1
                total_predictions += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º OZ
            if 'oz' in predictions:
                oz_pred = predictions['oz']['ensemble_prediction']
                oz_actual = 1 if home_goals > 0 and away_goals > 0 else 0
                
                oz_correct = oz_pred == oz_actual
                print(f"  OZ: –ø—Ä–æ–≥–Ω–æ–∑={oz_pred}, —Ñ–∞–∫—Ç={oz_actual}, {'‚úÖ' if oz_correct else '‚ùå'}")
                
                if oz_correct:
                    correct_predictions += 1
                total_predictions += 1
    
    if total_predictions > 0:
        accuracy = correct_predictions / total_predictions
        print(f"\nüìä –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {accuracy:.2%} ({correct_predictions}/{total_predictions})")


def main():
    test_improved_predictor()
    compare_with_actual_results()


if __name__ == '__main__':
    main()
