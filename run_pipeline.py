# izhbet/run_pipeline.py
"""
–ï–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ–π —Ü–µ–ø–æ—á–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.
–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –º–æ–¥—É–ª–µ–π processing ‚Üí forecast ‚Üí publisher.
"""

import argparse
import logging
import sys
from datetime import datetime

from core.integration_service import IntegrationService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - [%(levelname)s] %(name)s->%(funcName)s():%(lineno)d - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

logger = logging.getLogger(__name__)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞."""
    parser = argparse.ArgumentParser(
        description='–ï–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ–π —Ü–µ–ø–æ—á–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python run_pipeline.py today          # –ü–æ–ª–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è
  python run_pipeline.py all_time       # –ü–æ–ª–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ –¥–ª—è –≤—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
  python run_pipeline.py processing     # –¢–æ–ª—å–∫–æ —ç—Ç–∞–ø processing
  python run_pipeline.py forecast       # –¢–æ–ª—å–∫–æ —ç—Ç–∞–ø forecast
  python run_pipeline.py publisher      # –¢–æ–ª—å–∫–æ —ç—Ç–∞–ø publisher
  python run_pipeline.py status         # –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        """
    )
    
    parser.add_argument(
        'mode',
        choices=['today', 'all_time', 'processing', 'forecast', 'publisher', 'status'],
        help='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –ø–∞–π–ø–ª–∞–π–Ω–∞'
    )
    
    parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥'
    )
    
    args = parser.parse_args()
    
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
        integration_service = IntegrationService()
        
        # –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        print_header(args.mode)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–µ–∂–∏–º
        if args.mode == 'today':
            run_today_mode(integration_service)
        elif args.mode == 'all_time':
            run_all_time_mode(integration_service)
        elif args.mode == 'processing':
            run_processing_only(integration_service)
        elif args.mode == 'forecast':
            run_forecast_only(integration_service)
        elif args.mode == 'publisher':
            run_publisher_only(integration_service)
        elif args.mode == 'status':
            show_status(integration_service)
        
        # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        print_completion()
        
    except KeyboardInterrupt:
        logger.info('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')
        sys.exit(0)
    except Exception as e:
        logger.error(f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}')
        sys.exit(1)


def print_header(mode: str) -> None:
    """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
    print("=" * 80)
    print("üöÄ –ó–ê–ü–£–°–ö –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–û–ì–û –ü–ê–ô–ü–õ–ê–ô–ù–ê –û–ë–†–ê–ë–û–¢–ö–ò –î–ê–ù–ù–´–•")
    print("=" * 80)
    print(f"üìã –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {mode.upper()}")
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 80)
    print()


def print_completion() -> None:
    """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏."""
    print()
    print("=" * 80)
    print("‚úÖ –ü–ê–ô–ü–õ–ê–ô–ù –û–ë–†–ê–ë–û–¢–ö–ò –î–ê–ù–ù–´–• –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û")
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 80)


def run_today_mode(integration_service: IntegrationService) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–∂–∏–º TODAY - –ø–æ–ª–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è."""
    logger.info('–ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ TODAY - –ø–æ–ª–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è')
    
    results = integration_service.run_full_pipeline('TODAY')
    
    if results['success']:
        logger.info('–†–µ–∂–∏–º TODAY –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ')
        print_results_summary(results)
    else:
        logger.error('–û—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ TODAY')
        print_error_summary(results)
        sys.exit(1)


def run_all_time_mode(integration_service: IntegrationService) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–∂–∏–º ALL_TIME - –ø–æ–ª–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ –¥–ª—è –≤—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."""
    logger.info('–ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ ALL_TIME - –ø–æ–ª–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ –¥–ª—è –≤—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏')
    
    results = integration_service.run_full_pipeline('ALL_TIME')
    
    if results['success']:
        logger.info('–†–µ–∂–∏–º ALL_TIME –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ')
        print_results_summary(results)
    else:
        logger.error('–û—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ ALL_TIME')
        print_error_summary(results)
        sys.exit(1)


def run_processing_only(integration_service: IntegrationService) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ —ç—Ç–∞–ø processing."""
    logger.info('–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ —ç—Ç–∞–ø–∞ processing')
    
    results = integration_service.run_processing_only()
    
    if results['success']:
        logger.info('–≠—Ç–∞–ø processing –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ')
        print_stage_results('PROCESSING', results)
    else:
        logger.error('–û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ processing')
        print_stage_error('PROCESSING', results)
        sys.exit(1)


def run_forecast_only(integration_service: IntegrationService) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ —ç—Ç–∞–ø forecast."""
    logger.info('–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ —ç—Ç–∞–ø–∞ forecast')
    
    results = integration_service.run_forecast_only()
    
    if results['success']:
        logger.info('–≠—Ç–∞–ø forecast –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ')
        print_stage_results('FORECAST', results)
    else:
        logger.error('–û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ forecast')
        print_stage_error('FORECAST', results)
        sys.exit(1)


def run_publisher_only(integration_service: IntegrationService) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ —ç—Ç–∞–ø publisher."""
    logger.info('–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ —ç—Ç–∞–ø–∞ publisher')
    
    results = integration_service.run_publisher_only()
    
    if results['success']:
        logger.info('–≠—Ç–∞–ø publisher –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ')
        print_stage_results('PUBLISHER', results)
    else:
        logger.error('–û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ publisher')
        print_stage_error('PUBLISHER', results)
        sys.exit(1)


def show_status(integration_service: IntegrationService) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
    logger.info('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤')
    
    status = integration_service.get_pipeline_status()
    
    print("üìä –°–¢–ê–¢–£–° –ö–û–ú–ü–û–ù–ï–ù–¢–û–í –ü–ê–ô–ü–õ–ê–ô–ù–ê")
    print("=" * 50)
    
    for component, info in status['components'].items():
        print(f"üîß {component.upper()}:")
        print(f"   –°—Ç–∞—Ç—É—Å: {info['status']}")
        print(f"   –ü—É—Ç—å: {info['path']}")
        if 'error' in info:
            print(f"   –û—à–∏–±–∫–∞: {info['error']}")
        print()
    
    print(f"‚è∞ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {status['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}")


def print_results_summary(results: dict) -> None:
    """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
    print("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 50)
    print(f"‚úÖ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –£–°–ü–ï–®–ù–û")
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {results.get('duration', 0):.2f} —Å–µ–∫—É–Ω–¥")
    print()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —ç—Ç–∞–ø–∞–º
    stages = ['processing', 'forecast', 'publisher']
    for stage in stages:
        if stage in results and results[stage]:
            stage_result = results[stage]
            status = "‚úÖ –£–°–ü–ï–®–ù–û" if stage_result['success'] else "‚ùå –û–®–ò–ë–ö–ê"
            print(f"üîß {stage.upper()}: {status}")
            if 'command' in stage_result:
                print(f"   –ö–æ–º–∞–Ω–¥–∞: {stage_result['command']}")
        else:
            print(f"üîß {stage.upper()}: ‚è≠Ô∏è  –ü–†–û–ü–£–©–ï–ù")
        print()


def print_error_summary(results: dict) -> None:
    """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –æ—à–∏–±–æ–∫."""
    print("‚ùå –°–í–û–î–ö–ê –û–®–ò–ë–û–ö")
    print("=" * 50)
    
    if results['errors']:
        for error in results['errors']:
            print(f"‚Ä¢ {error}")
        print()
    
    # –û—à–∏–±–∫–∏ –ø–æ —ç—Ç–∞–ø–∞–º
    stages = ['processing', 'forecast', 'publisher']
    for stage in stages:
        if stage in results and results[stage] and not results[stage]['success']:
            stage_result = results[stage]
            print(f"üîß {stage.upper()}:")
            if 'error' in stage_result:
                print(f"   –û—à–∏–±–∫–∞: {stage_result['error']}")
            if 'stderr' in stage_result:
                print(f"   –î–µ—Ç–∞–ª–∏: {stage_result['stderr'][:200]}...")
            print()


def print_stage_results(stage_name: str, results: dict) -> None:
    """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∞–ø–∞."""
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –≠–¢–ê–ü–ê {stage_name}")
    print("=" * 50)
    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: –£–°–ü–ï–®–ù–û")
    if 'command' in results:
        print(f"üîß –ö–æ–º–∞–Ω–¥–∞: {results['command']}")
    print()


def print_stage_error(stage_name: str, results: dict) -> None:
    """–í—ã–≤–æ–¥–∏—Ç –æ—à–∏–±–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∞–ø–∞."""
    print(f"‚ùå –û–®–ò–ë–ö–ò –≠–¢–ê–ü–ê {stage_name}")
    print("=" * 50)
    
    if 'error' in results:
        print(f"–û—à–∏–±–∫–∞: {results['error']}")
    if 'stderr' in results:
        print(f"–î–µ—Ç–∞–ª–∏: {results['stderr'][:200]}...")
    print()


if __name__ == '__main__':
    main()
