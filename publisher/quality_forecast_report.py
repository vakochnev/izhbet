# izhbet/publisher/quality_forecast_report.py
"""
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ —Å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏.
–°–æ–∑–¥–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å –ª—É—á—à–∏–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏, –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∫–∞—á–µ—Å—Ç–≤–∞.
"""

import logging
import pandas as pd
from typing import List, Dict, Optional
from datetime import datetime, timedelta
from pathlib import Path

from forecast.conformal_publication import ConformalForecastGenerator
from config import Session_pool
from sqlalchemy import text

logger = logging.getLogger(__name__)


class QualityForecastReporter:
    """
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–∞ —Å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏.
    
    –°–æ–∑–¥–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å –ª—É—á—à–∏–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏, –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–æ —Å—Ç—Ä–æ–≥–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:
    - –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (>= 70%)
    - –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (>= 80%)
    - –ù–∏–∑–∫–∞—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å (<= 20%)
    """
    
    def __init__(self, output_dir: str = "results"):
        self.output_dir = Path(output_dir)
        self.publisher = ConformalForecastGenerator()
        
        # –°—Ç—Ä–æ–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        self.quality_criteria = {
            'min_probability': 0.5,    # 50% - —Å—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            'min_confidence': 0.8,     # 80% - –≤—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            'max_uncertainty': 0.3     # 30% - —Å—Ä–µ–¥–Ω—è—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å
        }
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
        self.output_dir.mkdir(parents=True, exist_ok=True)
    
    def generate_quality_forecast_report(self, date: Optional[datetime] = None) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç —Å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏.
        
        Args:
            date: –î–∞—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–µ–≥–æ–¥–Ω—è)
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –æ—Ç—á–µ—Ç–∞
        """
        if date is None:
            date = datetime.now()
        
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ —Å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ –Ω–∞ {date.strftime('%Y-%m-%d')}")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
            forecasts_df = self._load_forecasts_for_date(date)
            
            if forecasts_df.empty:
                logger.warning(f"–ù–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ {date.strftime('%Y-%m-%d')}")
                return self._create_empty_report(date)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å—Ç—Ä–æ–≥–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∫–∞—á–µ—Å—Ç–≤–∞
            quality_forecasts = self.publisher.filter_forecasts_by_criteria(
                forecasts_df, **self.quality_criteria
            )
            
            if quality_forecasts.empty:
                logger.warning(f"–ù–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ {date.strftime('%Y-%m-%d')}")
                return self._create_no_quality_report(date, len(forecasts_df))
            
            # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã (–¥–æ 10 —à—Ç—É–∫)
            best_forecasts = self.publisher.select_best_forecasts(quality_forecasts, max_forecasts=10)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report_content = self._generate_report_content(best_forecasts, date)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
            file_path = self._save_report(report_content, date)
            
            logger.info(f"–û—Ç—á–µ—Ç —Å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
            return str(file_path)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ —Å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏: {e}")
            raise
    
    def _load_forecasts_for_date(self, date: datetime) -> pd.DataFrame:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É."""
        from db.queries.publisher import get_forecasts_for_date
        
        df = get_forecasts_for_date(date.date())
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ feature
        df['forecast_type'] = df['feature'].apply(self._get_forecast_type)
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ {date.strftime('%Y-%m-%d')}")
        return df
    
    def _get_forecast_type(self, feature: int) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É –∫–æ–¥—É feature."""
        feature_mapping = {
            1: 'win_draw_loss',
            2: 'oz',
            3: 'goal_home',
            4: 'goal_away',
            5: 'total',
            6: 'total_home',
            7: 'total_away',
            8: 'total_amount',
            9: 'total_home_amount',
            10: 'total_away_amount'
        }
        return feature_mapping.get(feature, 'unknown')
    
    def _generate_report_content(self, forecasts_df: pd.DataFrame, date: datetime) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç—á–µ—Ç–∞."""
        report_lines = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
        report_lines.append("=" * 80)
        report_lines.append("üèÜ –û–¢–ß–ï–¢ –° –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ú–ò –ü–†–û–ì–ù–û–ó–ê–ú–ò")
        report_lines.append(f"üìÖ –î–∞—Ç–∞: {date.strftime('%Y-%m-%d')}")
        report_lines.append(f"‚è∞ –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {datetime.now().strftime('%H:%M:%S')}")
        report_lines.append("=" * 80)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_forecasts = len(forecasts_df)
        avg_probability = forecasts_df['probability'].mean()
        avg_confidence = forecasts_df['confidence'].mean()
        if 'uncertainty' in forecasts_df.columns:
            uncertainty_series = forecasts_df['uncertainty'].dropna()
            avg_uncertainty = uncertainty_series.mean() if len(uncertainty_series) > 0 else 0
        else:
            avg_uncertainty = 0
        
        report_lines.append(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–• –ü–†–û–ì–ù–û–ó–û–í:")
        report_lines.append(f"   ‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {total_forecasts}")
        report_lines.append(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {avg_probability:.1%}")
        report_lines.append(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.1%}")
        report_lines.append(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å: {avg_uncertainty:.1%}")
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        report_lines.append(f"\nüéØ –ö–†–ò–¢–ï–†–ò–ò –ö–ê–ß–ï–°–¢–í–ê:")
        report_lines.append(f"   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {self.quality_criteria['min_probability']:.0%}")
        report_lines.append(f"   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.quality_criteria['min_confidence']:.0%}")
        report_lines.append(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å: {self.quality_criteria['max_uncertainty']:.0%}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ –º–∞—Ç—á–∞–º
        grouped_forecasts = self._group_forecasts_by_match(forecasts_df)
        
        if not grouped_forecasts:
            report_lines.append("\n‚ùå –ù–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return "\n".join(report_lines)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –º–∞—Ç—á–∞–º
        report_lines.append(f"\nüèÜ –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ï –ü–†–û–ì–ù–û–ó–´ ({len(grouped_forecasts)} –º–∞—Ç—á–µ–π):")
        report_lines.append("-" * 80)
        
        for match_id, match_forecasts in grouped_forecasts.items():
            self._add_match_to_report(report_lines, match_forecasts)
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        report_lines.append(f"\nüìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        report_lines.append(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–∞—Ç—á–µ–π: {len(grouped_forecasts)}")
        report_lines.append(f"   ‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {total_forecasts}")
        report_lines.append(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {forecasts_df['rating'].mean():.3f}")
        
        return "\n".join(report_lines)
    
    def _group_forecasts_by_match(self, forecasts_df: pd.DataFrame) -> Dict[int, pd.DataFrame]:
        """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ –º–∞—Ç—á–∞–º."""
        if forecasts_df.empty:
            return {}
        
        grouped = {}
        for match_id, group in forecasts_df.groupby('match_id'):
            grouped[match_id] = group.sort_values('rating', ascending=False)
        
        return grouped
    
    def _add_match_to_report(self, report_lines: List[str], match_forecasts: pd.DataFrame) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ –≤ –æ—Ç—á–µ—Ç."""
        if match_forecasts.empty:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ
        first_forecast = match_forecasts.iloc[0]
        match_id = first_forecast.get('match_id', 'Unknown')
        match_info = f"{first_forecast.get('teamHome_name', 'Unknown')} vs {first_forecast.get('teamAway_name', 'Unknown')}"
        championship = first_forecast.get('championshipName', 'Unknown')
        sport = first_forecast.get('sportName', 'Unknown')
        game_time = first_forecast.get('gameData', 'Unknown')
        game_comment = first_forecast.get('gameComment', '')
        home_goals = first_forecast.get('numOfHeadsHome', None)
        away_goals = first_forecast.get('numOfHeadsAway', None)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        if hasattr(game_time, 'strftime'):
            game_time_str = game_time.strftime('%H:%M')
        else:
            game_time_str = str(game_time)
        
        report_lines.append(f"\n‚öΩ {match_info}")
        report_lines.append(f"   üèÜ {sport} - {championship}")
        report_lines.append(f"   üÜî ID –º–∞—Ç—á–∞: {match_id}")
        report_lines.append(f"   üïê {game_time_str}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Å—á–µ—Ç, –µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã
        if (home_goals is not None) and (away_goals is not None):
            result_str = self._get_match_result(home_goals, away_goals)
            report_lines.append(f"   üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result_str}")
            report_lines.append(f"   üßÆ –°—á–µ—Ç: {home_goals}:{away_goals}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–∞—Ç—á–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if game_comment and str(game_comment).strip():
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            comment = str(game_comment).strip()
            if len(comment) > 100:
                comment = comment[:97] + "..."
            report_lines.append(f"   üí¨ {comment}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
        for _, forecast in match_forecasts.iterrows():
            self._add_forecast_to_report(report_lines, forecast)
    
    def _add_forecast_to_report(self, report_lines: List[str], forecast: pd.Series) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥–Ω–æ–∑–µ –≤ –æ—Ç—á–µ—Ç."""
        forecast_type = forecast.get('forecast_type', 'unknown')
        outcome = forecast.get('outcome', 'unknown')
        probability = forecast.get('probability', 0.0)
        confidence = forecast.get('confidence', 0.0)
        uncertainty = forecast.get('uncertainty', 0.0)
        rating = forecast.get('rating', 0.0)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∏–ø –ø—Ä–æ–≥–Ω–æ–∑–∞
        type_display = self._format_forecast_type(forecast_type)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        rating_stars = "‚≠ê" * int(rating * 5) + "‚òÜ" * (5 - int(rating * 5))
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞—á–µ—Å—Ç–≤–∞
        quality_status = self._get_quality_status(probability, confidence, uncertainty)
        
        report_lines.append(f"   {quality_status} {type_display}: {outcome}")
        uncertainty_str = f"{uncertainty:.1%}" if uncertainty is not None else "N/A"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä–∞–Ω–∏—Ü–∞—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        bounds_str = ""
        if (forecast.get('lower_bound') is not None and forecast.get('upper_bound') is not None):
            bounds_str = f" | –ì—Ä–∞–Ω–∏—Ü—ã: [{forecast['lower_bound']:.1%}-{forecast['upper_bound']:.1%}]"
        
        report_lines.append(f"      üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {probability:.1%} | –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%} | –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å: {uncertainty_str}{bounds_str}")
        report_lines.append(f"      ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating:.3f} {rating_stars}")
    
    def _get_match_result(self, home_goals: int, away_goals: int) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—á–µ—Ç–∞.
        Returns: '–ü1' | '–ù' | '–ü2'
        """
        try:
            if home_goals > away_goals:
                return '–ü1'
            elif home_goals < away_goals:
                return '–ü2'
            else:
                return '–ù'
        except Exception:
            return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    
    def _format_forecast_type(self, forecast_type: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–∏–ø –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        type_mapping = {
            'win_draw_loss': 'WIN_DRAW_LOSS',
            'oz': 'OZ',
            'goal_home': 'GOAL_HOME',
            'goal_away': 'GOAL_AWAY',
            'total': 'TOTAL',
            'total_home': 'TOTAL_HOME',
            'total_away': 'TOTAL_AWAY',
            'total_amount': 'TOTAL_AMOUNT',
            'total_home_amount': 'TOTAL_HOME_AMOUNT',
            'total_away_amount': 'TOTAL_AWAY_AMOUNT'
        }
        return type_mapping.get(forecast_type, forecast_type.upper())
    
    def _get_quality_status(self, probability: float, confidence: float, uncertainty: float) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞."""
        if uncertainty is None:
            uncertainty = 0.0  # –ï—Å–ª–∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞, —Å—á–∏—Ç–∞–µ–º –µ—ë –Ω—É–ª–µ–≤–æ–π
        
        if probability >= 0.8 and confidence >= 0.9 and uncertainty <= 0.1:
            return "üî•"  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        elif probability >= 0.75 and confidence >= 0.85 and uncertainty <= 0.15:
            return "‚≠ê"  # –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        else:
            return "‚úÖ"  # –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    
    def _create_empty_report(self, date: datetime) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤."""
        content = f"""
{'=' * 80}
üèÜ –û–¢–ß–ï–¢ –° –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ú–ò –ü–†–û–ì–ù–û–ó–ê–ú–ò
üìÖ –î–∞—Ç–∞: {date.strftime('%Y-%m-%d')}
‚è∞ –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {datetime.now().strftime('%H:%M:%S')}
{'=' * 80}

‚ùå –ù–ï–¢ –ü–†–û–ì–ù–û–ó–û–í –ù–ê –£–ö–ê–ó–ê–ù–ù–£–Æ –î–ê–¢–£

–ù–∞ {date.strftime('%Y-%m-%d')} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
"""
        return self._save_report(content, date)
    
    def _create_no_quality_report(self, date: datetime, total_forecasts: int) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤."""
        content = f"""
{'=' * 80}
üèÜ –û–¢–ß–ï–¢ –° –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ú–ò –ü–†–û–ì–ù–û–ó–ê–ú–ò
üìÖ –î–∞—Ç–∞: {date.strftime('%Y-%m-%d')}
‚è∞ –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {datetime.now().strftime('%H:%M:%S')}
{'=' * 80}

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
   ‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {total_forecasts}
   ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: 0

‚ùå –ù–ï–¢ –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–• –ü–†–û–ì–ù–û–ó–û–í

–ò–∑ {total_forecasts} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∏ –æ–¥–∏–Ω –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä–æ–≥–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∫–∞—á–µ—Å—Ç–≤–∞:
   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {self.quality_criteria['min_probability']:.0%}
   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.quality_criteria['min_confidence']:.0%}
   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å: {self.quality_criteria['max_uncertainty']:.0%}
"""
        return self._save_report(content, date)
    
    def generate_quality_outcomes_report(self, date: Optional[datetime] = None) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç —Å –∏—Ç–æ–≥–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤.
        
        Args:
            date: –î–∞—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≤—á–µ—Ä–∞)
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –æ—Ç—á–µ—Ç–∞
        """
        if date is None:
            date = datetime.now() - timedelta(days=1)
        
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ —Å –∏—Ç–æ–≥–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ {date.strftime('%Y-%m-%d')}")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
            forecasts_df = self._load_forecasts_for_date(date)
            
            if forecasts_df.empty:
                logger.warning(f"–ù–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ {date.strftime('%Y-%m-%d')}")
                return self._create_empty_outcomes_report(date)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å—Ç—Ä–æ–≥–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∫–∞—á–µ—Å—Ç–≤–∞
            quality_forecasts = self.publisher.filter_forecasts_by_criteria(
                forecasts_df, **self.quality_criteria
            )
            
            if quality_forecasts.empty:
                logger.warning(f"–ù–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ {date.strftime('%Y-%m-%d')}")
                return self._create_no_quality_outcomes_report(date, len(forecasts_df))
            
            # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã (–¥–æ 10 —à—Ç—É–∫)
            best_forecasts = self.publisher.select_best_forecasts(quality_forecasts, max_forecasts=10)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç —Å –∏—Ç–æ–≥–∞–º–∏
            report_content = self._generate_outcomes_report_content(best_forecasts, date)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ –ø–∞–ø–∫—É outcomes
            file_path = self._save_outcomes_report(report_content, date)
            
            logger.info(f"–û—Ç—á–µ—Ç —Å –∏—Ç–æ–≥–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
            return str(file_path)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ —Å –∏—Ç–æ–≥–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {e}")
            raise

    def _generate_outcomes_report_content(self, forecasts_df: pd.DataFrame, date: datetime) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç—á–µ—Ç–∞ —Å –∏—Ç–æ–≥–∞–º–∏."""
        report_lines = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
        report_lines.append("=" * 80)
        report_lines.append("üèÜ –ò–¢–û–ì–ò –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–• –ü–†–û–ì–ù–û–ó–û–í")
        report_lines.append(f"üìÖ –î–∞—Ç–∞: {date.strftime('%Y-%m-%d')}")
        report_lines.append(f"‚è∞ –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {datetime.now().strftime('%H:%M:%S')}")
        report_lines.append("=" * 80)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_forecasts = len(forecasts_df)
        avg_probability = forecasts_df['probability'].mean()
        avg_confidence = forecasts_df['confidence'].mean()
        if 'uncertainty' in forecasts_df.columns:
            uncertainty_series = forecasts_df['uncertainty'].dropna()
            avg_uncertainty = uncertainty_series.mean() if len(uncertainty_series) > 0 else 0
        else:
            avg_uncertainty = 0
        
        report_lines.append(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–• –ü–†–û–ì–ù–û–ó–û–í:")
        report_lines.append(f"   ‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {total_forecasts}")
        report_lines.append(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {avg_probability:.1%}")
        report_lines.append(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.1%}")
        report_lines.append(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å: {avg_uncertainty:.1%}")
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        report_lines.append(f"\nüéØ –ö–†–ò–¢–ï–†–ò–ò –ö–ê–ß–ï–°–¢–í–ê:")
        report_lines.append(f"   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {self.quality_criteria['min_probability']:.0%}")
        report_lines.append(f"   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.quality_criteria['min_confidence']:.0%}")
        report_lines.append(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å: {self.quality_criteria['max_uncertainty']:.0%}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ –º–∞—Ç—á–∞–º
        grouped_forecasts = self._group_forecasts_by_match(forecasts_df)
        
        if not grouped_forecasts:
            report_lines.append("\n‚ùå –ù–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return "\n".join(report_lines)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –º–∞—Ç—á–∞–º —Å –∏—Ç–æ–≥–∞–º–∏
        report_lines.append(f"\nüèÜ –ò–¢–û–ì–ò –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–• –ü–†–û–ì–ù–û–ó–û–í ({len(grouped_forecasts)} –º–∞—Ç—á–µ–π):")
        report_lines.append("-" * 80)
        
        for match_id, match_forecasts in grouped_forecasts.items():
            self._add_match_outcomes_to_report(report_lines, match_forecasts)
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        report_lines.append(f"\nüìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        report_lines.append(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–∞—Ç—á–µ–π: {len(grouped_forecasts)}")
        report_lines.append(f"   ‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {total_forecasts}")
        report_lines.append(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {forecasts_df['rating'].mean():.3f}")
        
        return "\n".join(report_lines)

    def _add_match_outcomes_to_report(self, report_lines: List[str], match_forecasts: pd.DataFrame) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ —Å –∏—Ç–æ–≥–∞–º–∏ –≤ –æ—Ç—á–µ—Ç."""
        if match_forecasts.empty:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ
        first_forecast = match_forecasts.iloc[0]
        match_id = first_forecast.get('match_id', 'Unknown')
        match_info = f"{first_forecast.get('teamHome_name', 'Unknown')} vs {first_forecast.get('teamAway_name', 'Unknown')}"
        championship = first_forecast.get('championshipName', 'Unknown')
        sport = first_forecast.get('sportName', 'Unknown')
        game_time = first_forecast.get('gameData', 'Unknown')
        game_comment = first_forecast.get('gameComment', '')
        home_goals = first_forecast.get('numOfHeadsHome', None)
        away_goals = first_forecast.get('numOfHeadsAway', None)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        if hasattr(game_time, 'strftime'):
            game_time_str = game_time.strftime('%H:%M')
        else:
            game_time_str = str(game_time)
        
        report_lines.append(f"\n‚öΩ {match_info}")
        report_lines.append(f"   üèÜ {sport} - {championship}")
        report_lines.append(f"   üÜî ID –º–∞—Ç—á–∞: {match_id}")
        report_lines.append(f"   üïê {game_time_str}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Å—á–µ—Ç, –µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã
        if (home_goals is not None) and (away_goals is not None):
            result_str = self._get_match_result(home_goals, away_goals)
            report_lines.append(f"   üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result_str}")
            report_lines.append(f"   üßÆ –°—á–µ—Ç: {home_goals}:{away_goals}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–∞—Ç—á–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if game_comment and str(game_comment).strip():
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            comment = str(game_comment).strip()
            if len(comment) > 100:
                comment = comment[:97] + "..."
            report_lines.append(f"   üí¨ {comment}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ç–æ—á–Ω–æ—Å—Ç–∏
        for _, forecast in match_forecasts.iterrows():
            self._add_forecast_outcomes_to_report(report_lines, forecast)

    def _add_forecast_outcomes_to_report(self, report_lines: List[str], forecast: pd.Series) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥–Ω–æ–∑–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤ –æ—Ç—á–µ—Ç."""
        forecast_type = forecast.get('forecast_type', 'unknown')
        outcome = forecast.get('outcome', 'unknown')
        probability = forecast.get('probability', 0.0)
        confidence = forecast.get('confidence', 0.0)
        uncertainty = forecast.get('uncertainty', 0.0)
        rating = forecast.get('rating', 0.0)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∏–ø –ø—Ä–æ–≥–Ω–æ–∑–∞
        type_display = self._format_forecast_type(forecast_type)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        rating_stars = "‚≠ê" * int(rating * 5) + "‚òÜ" * (5 - int(rating * 5))
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞—á–µ—Å—Ç–≤–∞
        quality_status = self._get_quality_status(probability, confidence, uncertainty)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞ (–∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º)
        accuracy_status = "‚úÖ"  # –ü–æ–∫–∞ –≤—Å–µ–≥–¥–∞ —É—Å–ø–µ—à–Ω–æ, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏
        
        report_lines.append(f"   {quality_status} {accuracy_status} {type_display}: {outcome}")
        uncertainty_str = f"{uncertainty:.1%}" if uncertainty is not None else "N/A"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä–∞–Ω–∏—Ü–∞—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        bounds_str = ""
        if (forecast.get('lower_bound') is not None and forecast.get('upper_bound') is not None):
            bounds_str = f" | –ì—Ä–∞–Ω–∏—Ü—ã: [{forecast['lower_bound']:.1%}-{forecast['upper_bound']:.1%}]"
        
        report_lines.append(f"      üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {probability:.1%} | –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%} | –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å: {uncertainty_str}{bounds_str}")
        report_lines.append(f"      ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating:.3f} {rating_stars}")

    def _create_empty_outcomes_report(self, date: datetime) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤."""
        content = f"""
{'=' * 80}
üèÜ –ò–¢–û–ì–ò –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–• –ü–†–û–ì–ù–û–ó–û–í
üìÖ –î–∞—Ç–∞: {date.strftime('%Y-%m-%d')}
‚è∞ –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {datetime.now().strftime('%H:%M:%S')}
{'=' * 80}

‚ùå –ù–ï–¢ –ü–†–û–ì–ù–û–ó–û–í –ù–ê –£–ö–ê–ó–ê–ù–ù–£–Æ –î–ê–¢–£

–ù–∞ {date.strftime('%Y-%m-%d')} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
"""
        return self._save_outcomes_report(content, date)
    
    def _create_no_quality_outcomes_report(self, date: datetime, total_forecasts: int) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤."""
        content = f"""
{'=' * 80}
üèÜ –ò–¢–û–ì–ò –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–• –ü–†–û–ì–ù–û–ó–û–í
üìÖ –î–∞—Ç–∞: {date.strftime('%Y-%m-%d')}
‚è∞ –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {datetime.now().strftime('%H:%M:%S')}
{'=' * 80}

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
   ‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {total_forecasts}
   ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: 0

‚ùå –ù–ï–¢ –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–• –ü–†–û–ì–ù–û–ó–û–í

–ò–∑ {total_forecasts} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∏ –æ–¥–∏–Ω –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä–æ–≥–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∫–∞—á–µ—Å—Ç–≤–∞:
   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {self.quality_criteria['min_probability']:.0%}
   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.quality_criteria['min_confidence']:.0%}
   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å: {self.quality_criteria['max_uncertainty']:.0%}
"""
        return self._save_outcomes_report(content, date)

    def _save_report(self, content: str, date: datetime) -> str:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª."""
        from db.storage.publisher import save_quality_forecast_report
        return save_quality_forecast_report(content, date, str(self.output_dir))

    def _save_outcomes_report(self, content: str, date: datetime) -> str:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç —Å –∏—Ç–æ–≥–∞–º–∏ –≤ –ø–∞–ø–∫—É outcomes."""
        from db.storage.publisher import save_quality_outcomes_report
        return save_quality_outcomes_report(content, date, str(self.output_dir))
